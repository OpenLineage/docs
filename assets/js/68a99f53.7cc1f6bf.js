"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4380],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>u});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),k=m(a),u=i,d=k["".concat(p,".").concat(u)]||k[u]||c[u]||r;return a?n.createElement(d,o(o({ref:t},s),{},{components:a})):n.createElement(d,o({ref:t},s))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=k;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var m=2;m<r;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},3847:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var n=a(87462),i=(a(67294),a(3905));const r={title:"1.11.3",sidebar_position:9946},o="1.11.3 - 2024-04-04",l={unversionedId:"releases/1_11_3",id:"releases/1_11_3",title:"1.11.3",description:"Added",source:"@site/docs/releases/1_11_3.md",sourceDirName:"releases",slug:"/releases/1_11_3",permalink:"/docs/releases/1_11_3",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/releases/1_11_3.md",tags:[],version:"current",sidebarPosition:9946,frontMatter:{title:"1.11.3",sidebar_position:9946},sidebar:"tutorialSidebar",previous:{title:"OpenLineage Proxy",permalink:"/docs/development/ol-proxy"},next:{title:"1.10.2",permalink:"/docs/releases/1_10_2"}},p={},m=[{value:"Added",id:"added",level:3},{value:"Fixed",id:"fixed",level:3}],s={toc:m};function c(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"1113---2024-04-04"},"1.11.3 - 2024-04-04"),(0,i.kt)("h3",{id:"added"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Common: add support for ",(0,i.kt)("inlineCode",{parentName:"strong"},"SCRIPT"),"-type jobs in BigQuery")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2564"},(0,i.kt)("inlineCode",{parentName:"a"},"#2564"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/kacpermuda"},"@kacpermuda"),(0,i.kt)("br",{parentName:"li"}),"In the case of ",(0,i.kt)("inlineCode",{parentName:"li"},"SCRIPT"),"-type jobs in BigQuery, no lineage was being extracted because the ",(0,i.kt)("inlineCode",{parentName:"li"},"SCRIPT")," job had no lineage information - it only spawned child jobs that had that information. With this change, the integration extracts lineage information from child jobs when dealing with ",(0,i.kt)("inlineCode",{parentName:"li"},"SCRIPT"),"-type jobs."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: support for built-in lineage extraction")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2272"},(0,i.kt)("inlineCode",{parentName:"a"},"#2272"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"This PR adds a ",(0,i.kt)("inlineCode",{parentName:"em"},"spark-interfaces-scala")," package that allows lineage extraction to be implemented within Spark extensions (Iceberg, Delta, GCS, etc.). The Openlineage integration, when traversing the query plan, verifies if nodes implement defined interfaces. If so, interface methods are used to extract lineage. Refer to the ",(0,i.kt)("a",{parentName:"em",href:"https://github.com/OpenLineage/OpenLineage/tree/spark/built-in-lineage/integration/spark-interfaces-scala#readme"},"README")," for more details.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark/Java: add support for Micrometer metrics")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2496"},(0,i.kt)("inlineCode",{parentName:"a"},"#2496"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/mobuchowski"},"@mobuchowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Adds a mechanism for forwarding metrics to any ",(0,i.kt)("a",{parentName:"em",href:"https://docs.micrometer.io/micrometer/reference/implementations.html"},"Micrometer-compatible implementation"),". Included: ",(0,i.kt)("inlineCode",{parentName:"em"},"MeterRegistryyFactory"),", ",(0,i.kt)("inlineCode",{parentName:"em"},"MicrometerProvider"),", ",(0,i.kt)("inlineCode",{parentName:"em"},"StatsDMetricsBuilder"),", metrics config in OpenLineage config, and a Java client implementation.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: add support for telemetry mechanism")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2528"},(0,i.kt)("inlineCode",{parentName:"a"},"#2528"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/mobuchowski"},"@mobuchowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Adds timers, counters and additional instrumentation in order to implement Micrometer metrics collection.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: support query option on table read")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2556"},(0,i.kt)("inlineCode",{parentName:"a"},"#2556"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/mobuchowski"},"@mobuchowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Adds support for the Spark-BigQuery connector's query input option, which executes a query directly on BigQuery, storing the result in an intermediate dataset, bypassing Spark's computation layer. Due to this, the lineage is retrieved using the SQL parser, similarly to ",(0,i.kt)("inlineCode",{parentName:"em"},"JDBCRelation"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: change ",(0,i.kt)("inlineCode",{parentName:"strong"},"SparkPropertyFacetBuilder")," to support recording Spark runtime")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2523"},(0,i.kt)("inlineCode",{parentName:"a"},"#2523"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Ruihua98"},"@Ruihua98"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Modifies ",(0,i.kt)("inlineCode",{parentName:"em"},"SparkPropertyFacetBuilder")," to capture the ",(0,i.kt)("inlineCode",{parentName:"em"},"RuntimeConfig")," of the Spark session because the existing ",(0,i.kt)("inlineCode",{parentName:"em"},"SparkPropertyFacet")," can only capture the static config of the Spark context. This facet will be added in both RDD-related and SQL-related runs.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spec: add ",(0,i.kt)("inlineCode",{parentName:"strong"},"fileCount")," to dataset stat facets")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2562"},(0,i.kt)("inlineCode",{parentName:"a"},"#2562"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Adds a ",(0,i.kt)("inlineCode",{parentName:"em"},"fileCount")," field to ",(0,i.kt)("inlineCode",{parentName:"em"},"DataQualityMetricsInputDatasetFacet")," and ",(0,i.kt)("inlineCode",{parentName:"em"},"OutputStatisticsOutputDatasetFacet")," specification."))),(0,i.kt)("h3",{id:"fixed"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"dbt: ",(0,i.kt)("inlineCode",{parentName:"strong"},"dbt-ol")," should transparently exit with the same exit code as the child ",(0,i.kt)("inlineCode",{parentName:"strong"},"dbt")," process")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2560"},(0,i.kt)("inlineCode",{parentName:"a"},"#2560"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/blacklight"},"@blacklight"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Makes ",(0,i.kt)("inlineCode",{parentName:"em"},"dbt-ol")," transparently exit with the same exit code as the child ",(0,i.kt)("inlineCode",{parentName:"em"},"dbt")," process.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: disable module metadata generation")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2531"},(0,i.kt)("inlineCode",{parentName:"a"},"#2531"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/HuangZhenQiu"},"@HuangZhenQiu"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Disables the module metadata generation for Flink to fix the problem of having gradle dependencies to submodules within ",(0,i.kt)("inlineCode",{parentName:"em"},"openlineage-flink.jar"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: fixes to version 1.19")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2507"},(0,i.kt)("inlineCode",{parentName:"a"},"#2507"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Fixes the class not found issue when checking for Cassandra classes. Also fixes the Maven pom dependency on subprojects.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Python: small improvements to ",(0,i.kt)("inlineCode",{parentName:"strong"},".emit()")," method logging & annotations")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2539"},(0,i.kt)("inlineCode",{parentName:"a"},"#2539"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Updates OpenLineage.emit debug messages and annotations.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"SQL: show error message when OpenLineageSql cannot find native library")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2547"},(0,i.kt)("inlineCode",{parentName:"a"},"#2547"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"When the ",(0,i.kt)("inlineCode",{parentName:"em"},"OpenLineageSql")," class could not load a native library, if returned ",(0,i.kt)("inlineCode",{parentName:"em"},"None")," for all operations. But because the error message was suppressed, the user could not determine the reason.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"SQL: update code to conform to upstream sqlparser-rs changes")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2510"},(0,i.kt)("inlineCode",{parentName:"a"},"#2510"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/mobuchowski"},"@mobuchowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Includes tests and cosmetic improvements.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: fix access to active Spark session")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2535"},(0,i.kt)("inlineCode",{parentName:"a"},"#2535"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Changes behavior so ",(0,i.kt)("inlineCode",{parentName:"em"},"IllegalStateException")," is always caught when accessing ",(0,i.kt)("inlineCode",{parentName:"em"},"SparkSession"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: fix Databricks environment")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2537"},(0,i.kt)("inlineCode",{parentName:"a"},"#2537"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Fixes the ",(0,i.kt)("inlineCode",{parentName:"em"},"ClassNotFoundError")," occurring on Databricks runtime and extends the integration test to verify ",(0,i.kt)("inlineCode",{parentName:"em"},"DatabricksEnvironmentFacet"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: fixed memory leak in JobMetricsHolder")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2565"},(0,i.kt)("inlineCode",{parentName:"a"},"#2565"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/d-m-h"},"@d-m-h"),(0,i.kt)("em",{parentName:"li"},"The ",(0,i.kt)("inlineCode",{parentName:"em"},"JobMetricsHolder#cleanUp(int)")," method now correctly purges unneeded state from both maps.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: fixed memory leak in ",(0,i.kt)("inlineCode",{parentName:"strong"},"UnknownEntryFacetListener"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2557"},(0,i.kt)("inlineCode",{parentName:"a"},"#2557"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("em",{parentName:"li"},"Prevents storing the state when a facet is disabled, purging the state after populating run facets.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: fix parsing ",(0,i.kt)("inlineCode",{parentName:"strong"},"JDBCOptions(table=...)")," containing subquery")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2546"},(0,i.kt)("inlineCode",{parentName:"a"},"#2546"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Prevents ",(0,i.kt)("inlineCode",{parentName:"em"},"openlineage-spark")," from producing datasets with names like `database.(select ")," from table)` for JDBC sources.*"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark/Snowflake: support query option via SQL parser")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2563"},(0,i.kt)("inlineCode",{parentName:"a"},"#2563"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/mobuchowski"},"@mobuchowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"When a Snowflake job is bypassing Spark's computation layer, now the SQL parser will be used to get the lineage.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: always catch ",(0,i.kt)("inlineCode",{parentName:"strong"},"IllegalStateException")," when accessing ",(0,i.kt)("inlineCode",{parentName:"strong"},"SparkSession"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2535"},(0,i.kt)("inlineCode",{parentName:"a"},"#2535"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"em"},"IllegalStateException")," was not being caught."))))}c.isMDXComponent=!0}}]);