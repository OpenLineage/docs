"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[83],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=l(a),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return a?n.createElement(h,s(s({ref:t},c),{},{components:a})):n.createElement(h,s({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var l=2;l<i;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},66240:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const i={sidebar_position:5},s="Understanding and Using Facets",o={unversionedId:"guides/facets",id:"guides/facets",title:"Understanding and Using Facets",description:"Adapted from the OpenLineage spec.",source:"@site/docs/guides/facets.md",sourceDirName:"guides",slug:"/guides/facets",permalink:"/docs/guides/facets",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/guides/facets.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Using Marquez with dbt",permalink:"/docs/guides/dbt"},next:{title:"Using the OpenLineage Proxy with Airflow",permalink:"/docs/guides/airflow_proxy"}},p={},l=[{value:"Adapted from the OpenLineage spec.",id:"adapted-from-the-openlineage-spec",level:4},{value:"Custom Facet Naming",id:"custom-facet-naming",level:4},{value:"Standard Facets",id:"standard-facets",level:3},{value:"Run Facets",id:"run-facets",level:4},{value:"Job Facets",id:"job-facets",level:4},{value:"Dataset Facets",id:"dataset-facets",level:4},{value:"Input Dataset Facets",id:"input-dataset-facets",level:4},{value:"Output Dataset Facets",id:"output-dataset-facets",level:4}],c={toc:l};function u(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"understanding-and-using-facets"},"Understanding and Using Facets"),(0,r.kt)("h4",{id:"adapted-from-the-openlineage-spec"},"Adapted from the OpenLineage ",(0,r.kt)("a",{parentName:"h4",href:"https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.md"},"spec"),"."),(0,r.kt)("p",null,"Facets are pieces of metadata that can be attached to the core entities of the spec:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Run"),(0,r.kt)("li",{parentName:"ul"},"Job"),(0,r.kt)("li",{parentName:"ul"},"Dataset (Inputs or Outputs)")),(0,r.kt)("p",null,"A facet is an atomic piece of metadata identified by its name. This means that emitting a new facet with the same name for the same entity replaces the previous facet instance for that entity entirely. It is defined as a JSON object that can be either part of the spec or a custom facet defined in a different project."),(0,r.kt)("p",null,"Custom facets must use a distinct prefix named after the project defining them to avoid collision with standard facets defined in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.json"},"OpenLineage.json")," spec.\nThey have a ",(0,r.kt)("inlineCode",{parentName:"p"},"\\_schemaURL")," field pointing to the corresponding version of the facet schema (as a JSONPointer: ",(0,r.kt)("a",{parentName:"p",href:"https://swagger.io/docs/specification/using-ref/"},"$ref URL location")," )."),(0,r.kt)("p",null,"For example: ",(0,r.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/MyCustomJobFacet"},"https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/MyCustomJobFacet")),(0,r.kt)("p",null,"The versioned URL must be an immutable pointer to the version of the facet schema. For example, it should include a tag of a git sha and not a branch name. This should also be a canonical URL. There should be only one URL used for a given version of a schema."),(0,r.kt)("p",null,"Custom facets can be promoted to the standard by including them in the spec."),(0,r.kt)("h4",{id:"custom-facet-naming"},"Custom Facet Naming"),(0,r.kt)("p",null,"The naming of custom facets should follow the pattern ",(0,r.kt)("inlineCode",{parentName:"p"},"{prefix}{name}{entity}Facet")," PascalCased.",(0,r.kt)("br",{parentName:"p"}),"\n","The prefix must be a distinct identifier named after the project defining it to avoid colision with standard facets defined in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/blob/main/spec/OpenLineage.json"},"OpenLineage.json")," spec.\nThe entity is the core entity for which the facet is attached."),(0,r.kt)("p",null,"When attached to the core entity, the key should follow the pattern ",(0,r.kt)("inlineCode",{parentName:"p"},"{prefix}_{name}"),", where both prefix and name follow snakeCase pattern. "),(0,r.kt)("p",null,"An example of a valid name is ",(0,r.kt)("inlineCode",{parentName:"p"},"BigQueryStatisticsJobFacet")," and its key ",(0,r.kt)("inlineCode",{parentName:"p"},"bigQuery_statistics"),"."),(0,r.kt)("h3",{id:"standard-facets"},"Standard Facets"),(0,r.kt)("h4",{id:"run-facets"},"Run Facets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"nominalTime"),": Captures the time this run is scheduled for. This is a typical usage for time based scheduled job. The job has a nominal schedule time that will be different from the actual time it is running at.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"parent"),": Captures the parent job and Run when the run was spawn from a parent run. For example in the case of Airflow, there's a run for the DAG that then spawns runs for individual tasks that would refer to the parent run as the DAG run. Similarly when a SparkOperator starts a Spark job, this creates a separate run that refers to the task run as its parent.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"errorMessage"),": Captures potential error message, programming language - and optionally stack trace - with which the run failed. "))),(0,r.kt)("h4",{id:"job-facets"},"Job Facets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sourceCodeLocation"),": Captures the source code location and version (e.g., the git sha) of the job.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sourceCode"),": Captures the language (e.g., Python) and actual source code of the job.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sql"),": Capture the SQL query if this job is a SQL query.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ownership"),": Captures the owners of the job."))),(0,r.kt)("h4",{id:"dataset-facets"},"Dataset Facets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"schema"),": Captures the schema of the dataset.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dataSource"),": Captures the database instance containing this dataset (e.g., Database schema, Object store bucket, etc.)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"lifecycleStateChange"),": Captures the lifecycle states of the dataset (e.g., alter, create, drop, overwrite, rename, truncate).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"version"),": Captures the dataset version when versioning is defined by database (e.g., Iceberg snapshot ID).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/blob/main/spec/facets/ColumnLineageDatasetFacet.json"},(0,r.kt)("strong",{parentName:"a"},"columnLineage")),": Captures the column-level lineage.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"ownership"),": Captures the owners of the dataset."))),(0,r.kt)("h4",{id:"input-dataset-facets"},"Input Dataset Facets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dataQualityMetrics"),": Captures dataset-level and column-level data quality metrics when scanning a dataset whith a DataQuality library (row count, byte size, null count, distinct count, average, min, max, quantiles).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dataQualityAssertions"),": Captures the result of running data tests on a dataset or its columns."))),(0,r.kt)("h4",{id:"output-dataset-facets"},"Output Dataset Facets"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"outputStatistics"),": Captures the size of the output written to a dataset (row count and byte size).")))}u.isMDXComponent=!0}}]);