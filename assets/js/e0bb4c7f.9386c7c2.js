"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4005],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>k});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(t),k=r,d=c["".concat(p,".").concat(k)]||c[k]||m[k]||i;return t?a.createElement(d,l(l({ref:n},u),{},{components:t})):a.createElement(d,l({ref:n},u))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=c;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},85162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(67294),r=t(86010);const i="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,l),hidden:t},n)}},74866:(e,n,t)=>{t.d(n,{Z:()=>C});var a=t(87462),r=t(67294),i=t(86010),l=t(76775),o=t(91980),p=t(67392),s=t(50012);function u(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,p.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function c(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function k(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,o._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function d(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=m(e),[l,o]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!c({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[p,u]=k({queryString:t,groupId:a}),[d,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,s.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),h=(()=>{const e=p??d;return c({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!c({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);o(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var g=t(12466),h=t(72389);const f="tabList__CuJ",N="tabItem_LNqP";function b(e){let{className:n,block:t,selectedValue:l,selectValue:o,tabValues:p}=e;const s=[],{blockElementScrollPositionUntilNextRender:u}=(0,g.o5)(),m=e=>{const n=e.currentTarget,t=s.indexOf(n),a=p[t].value;a!==l&&(u(n),o(a))},c=e=>{let n=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=s.indexOf(e.currentTarget)+1;n=s[t]??s[0];break}case"ArrowLeft":{const t=s.indexOf(e.currentTarget)-1;n=s[t]??s[s.length-1];break}}n?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>s.push(e),onKeyDown:c,onClick:m},o,{className:(0,i.Z)("tabs__item",N,o?.className,{"tabs__item--active":l===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const i=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=i.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},i.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function y(e){const n=d(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",f)},r.createElement(b,(0,a.Z)({},e,n)),r.createElement(v,(0,a.Z)({},e,n)))}function C(e){const n=(0,h.Z)();return r.createElement(y,(0,a.Z)({key:String(n)},e))}},71471:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>p,default:()=>k,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var a=t(87462),r=(t(67294),t(3905)),i=t(55154),l=t(81742);const o={sidebar_position:2,title:"Configuration"},p=void 0,s={unversionedId:"client/java/configuration",id:"client/java/configuration",title:"Configuration",description:"We recommend configuring the client with an openlineage.yml file that contains all the",source:"@site/docs/client/java/configuration.md",sourceDirName:"client/java",slug:"/client/java/configuration",permalink:"/docs/client/java/configuration",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/client/java/configuration.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Configuration"},sidebar:"tutorialSidebar",previous:{title:"Java",permalink:"/docs/client/java/"},next:{title:"Usage Example",permalink:"/docs/client/java/usage"}},u={},m=[{value:"Environment Variables",id:"environment-variables",level:2},{value:"Facets Configuration",id:"facets-configuration",level:2},{value:"Transports",id:"transports",level:2},{value:"Error Handling via Transport",id:"error-handling-via-transport",level:3},{value:"Defining Your Own Transport",id:"defining-your-own-transport",level:3},{value:"Circuit Breakers",id:"circuit-breakers",level:2}],c={toc:m};function k(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We recommend configuring the client with an ",(0,r.kt)("inlineCode",{parentName:"p"},"openlineage.yml")," file that contains all the\ndetails of how to connect to your OpenLineage backend."),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"#transports"},"example configurations.")),(0,r.kt)("p",null,"You can make this file available to the client in three ways (the list also presents precedence of the configuration):"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Set an ",(0,r.kt)("inlineCode",{parentName:"li"},"OPENLINEAGE_CONFIG")," environment variable to a file path: ",(0,r.kt)("inlineCode",{parentName:"li"},"OPENLINEAGE_CONFIG=path/to/openlineage.yml"),"."),(0,r.kt)("li",{parentName:"ol"},"Place an ",(0,r.kt)("inlineCode",{parentName:"li"},"openlineage.yml")," in the user's current working directory."),(0,r.kt)("li",{parentName:"ol"},"Place an ",(0,r.kt)("inlineCode",{parentName:"li"},"openlineage.yml")," under ",(0,r.kt)("inlineCode",{parentName:"li"},".openlineage/")," in the user's home directory (",(0,r.kt)("inlineCode",{parentName:"li"},"~/.openlineage/openlineage.yml"),").")),(0,r.kt)("h2",{id:"environment-variables"},"Environment Variables"),(0,r.kt)("p",null,"The following environment variables are available:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Since"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OPENLINEAGE_CONFIG"),(0,r.kt)("td",{parentName:"tr",align:null},"The path to the YAML configuration file. Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"path/to/openlineage.yml")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"OPENLINEAGE_DISABLED"),(0,r.kt)("td",{parentName:"tr",align:null},"When ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),", OpenLineage will not emit events."),(0,r.kt)("td",{parentName:"tr",align:null},"0.9.0")))),(0,r.kt)("h2",{id:"facets-configuration"},"Facets Configuration"),(0,r.kt)("p",null,"In YAML configuration file you can also specify a list of disabled facets that will not be included in OpenLineage event."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"YAML Configuration")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transport:\n  type: console\nfacets:\n  disabled: \n    - spark_unknown\n    - spark_logicalPlan\n")),(0,r.kt)("h2",{id:"transports"},"Transports"),(0,r.kt)(i.ZP,{mdxType:"Transports"}),(0,r.kt)("h3",{id:"error-handling-via-transport"},"Error Handling via Transport"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Connect to http://localhost:5000\nOpenLineageClient client = OpenLineageClient.builder()\n  .transport(\n    HttpTransport.builder()\n      .uri("http://localhost:5000")\n      .apiKey("f38d2189-c603-4b46-bdea-e573a3b5a7d5")\n      .build())\n  .registerErrorHandler(new EmitErrorHandler() {\n    @Override\n    public void handleError(Throwable throwable) {\n      // Handle emit error here\n    }\n  }).build();\n')),(0,r.kt)("h3",{id:"defining-your-own-transport"},"Defining Your Own Transport"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"OpenLineageClient client = OpenLineageClient.builder()\n  .transport(\n    new MyTransport() {\n      @Override\n      public void emit(OpenLineage.RunEvent runEvent) {\n        // Add emit logic here\n      }\n    }).build();\n")),(0,r.kt)("h2",{id:"circuit-breakers"},"Circuit Breakers"),(0,r.kt)(l.ZP,{mdxType:"CircuitBreakers"}))}k.isMDXComponent=!0},81742:(e,n,t)=>{t.d(n,{ZP:()=>p});var a=t(87462),r=(t(67294),t(3905)),i=t(74866),l=t(85162);const o={toc:[{value:"Simple Memory Circuit Breaker",id:"simple-memory-circuit-breaker",level:3},{value:"Java Runtime Circuit Breaker",id:"java-runtime-circuit-breaker",level:3},{value:"Custom Circuit Breaker",id:"custom-circuit-breaker",level:3}]};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This feature is available in OpenLineage versions >= 1.9.0.")),(0,r.kt)("p",null,"To prevent from over-instrumentation OpenLineage integration provides a circuit breaker mechanism\nthat stops OpenLineage from creating, serializing and sending OpenLineage events."),(0,r.kt)("h3",{id:"simple-memory-circuit-breaker"},"Simple Memory Circuit Breaker"),(0,r.kt)("p",null,"Simple circuit breaker which is working based only on free memory within JVM. Configuration should\ncontain free memory threshold limit (percentage). Default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"20%"),". The circuit breaker\nwill close within first call if free memory is low. ",(0,r.kt)("inlineCode",{parentName:"p"},"circuitCheckIntervalInMillis")," parameter is used\nto configure a frequency circuit breaker is called. Default value is ",(0,r.kt)("inlineCode",{parentName:"p"},"1000ms"),", when no entry in config.\n",(0,r.kt)("inlineCode",{parentName:"p"},"timeoutInSeconds")," is optional. If set, OpenLineage code execution is terminated when a timeout\nis reached (added in version 1.13). "),(0,r.kt)(i.Z,{groupId:"integrations",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"yaml",label:"Yaml Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"circuitBreaker:\n  type: simpleMemory\n  memoryThreshold: 20\n  circuitCheckIntervalInMillis: 1000\n  timeoutInSeconds: 90\n"))),(0,r.kt)(l.Z,{value:"spark",label:"Spark Config",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Definition"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.type"),(0,r.kt)("td",{parentName:"tr",align:null},"Circuit breaker type selected"),(0,r.kt)("td",{parentName:"tr",align:null},"simpleMemory")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.memoryThreshold"),(0,r.kt)("td",{parentName:"tr",align:null},"Memory threshold"),(0,r.kt)("td",{parentName:"tr",align:null},"20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.circuitCheckIntervalInMillis"),(0,r.kt)("td",{parentName:"tr",align:null},"Frequency of checking circuit breaker"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.timeoutInSeconds"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timeout for OpenLineage execution (Since version 1.13)"),(0,r.kt)("td",{parentName:"tr",align:null},"90"))))),(0,r.kt)(l.Z,{value:"flink",label:"Flink Config",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Definition"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"openlineage.circuitBreaker.type"),(0,r.kt)("td",{parentName:"tr",align:null},"Circuit breaker type selected"),(0,r.kt)("td",{parentName:"tr",align:null},"simpleMemory")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"openlineage.circuitBreaker.memoryThreshold"),(0,r.kt)("td",{parentName:"tr",align:null},"Memory threshold"),(0,r.kt)("td",{parentName:"tr",align:null},"20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"openlineage.circuitBreaker.circuitCheckIntervalInMillis"),(0,r.kt)("td",{parentName:"tr",align:null},"Frequency of checking circuit breaker"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.timeoutInSeconds"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timeout for OpenLineage execution (Since version 1.13)"),(0,r.kt)("td",{parentName:"tr",align:null},"90")))))),(0,r.kt)("h3",{id:"java-runtime-circuit-breaker"},"Java Runtime Circuit Breaker"),(0,r.kt)("p",null,"More complex version of circuit breaker. The amount of free memory can be low as long as\namount of time spent on Garbage Collection is acceptable. ",(0,r.kt)("inlineCode",{parentName:"p"},"JavaRuntimeCircuitBreaker")," closes\nwhen free memory drops below threshold and amount of time spent on garbage collection exceeds\ngiven threshold (",(0,r.kt)("inlineCode",{parentName:"p"},"10%")," by default). The circuit breaker is always open when checked for the first time\nas GC threshold is computed since the previous circuit breaker call.\n",(0,r.kt)("inlineCode",{parentName:"p"},"circuitCheckIntervalInMillis")," parameter is used\nto configure a frequency circuit breaker is called.\nDefault value is ",(0,r.kt)("inlineCode",{parentName:"p"},"1000ms"),", when no entry in config.\n",(0,r.kt)("inlineCode",{parentName:"p"},"timeoutInSeconds")," is optional. If set, OpenLineage code execution is terminated when a timeout\nis reached (added in version 1.13)."),(0,r.kt)(i.Z,{groupId:"integrations",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"yaml",label:"Yaml Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"circuitBreaker:\n  type: javaRuntime\n  memoryThreshold: 20\n  gcCpuThreshold: 10\n  circuitCheckIntervalInMillis: 1000\n  timeoutInSeconds: 90\n"))),(0,r.kt)(l.Z,{value:"spark",label:"Spark Config",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Definition"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.type"),(0,r.kt)("td",{parentName:"tr",align:null},"Circuit breaker type selected"),(0,r.kt)("td",{parentName:"tr",align:null},"javaRuntime")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.memoryThreshold"),(0,r.kt)("td",{parentName:"tr",align:null},"Memory threshold"),(0,r.kt)("td",{parentName:"tr",align:null},"20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.gcCpuThreshold"),(0,r.kt)("td",{parentName:"tr",align:null},"Garbage Collection CPU threshold"),(0,r.kt)("td",{parentName:"tr",align:null},"10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.circuitCheckIntervalInMillis"),(0,r.kt)("td",{parentName:"tr",align:null},"Frequency of checking circuit breaker"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.timeoutInSeconds"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timeout for OpenLineage execution (Since version 1.13)"),(0,r.kt)("td",{parentName:"tr",align:null},"90"))))),(0,r.kt)(l.Z,{value:"flink",label:"Flink Config",mdxType:"TabItem"},(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Definition"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"openlineage.circuitBreaker.type"),(0,r.kt)("td",{parentName:"tr",align:null},"Circuit breaker type selected"),(0,r.kt)("td",{parentName:"tr",align:null},"javaRuntime")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"openlineage.circuitBreaker.memoryThreshold"),(0,r.kt)("td",{parentName:"tr",align:null},"Memory threshold"),(0,r.kt)("td",{parentName:"tr",align:null},"20")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"openlineage.circuitBreaker.gcCpuThreshold"),(0,r.kt)("td",{parentName:"tr",align:null},"Garbage Collection CPU threshold"),(0,r.kt)("td",{parentName:"tr",align:null},"10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"openlineage.circuitBreaker.circuitCheckIntervalInMillis"),(0,r.kt)("td",{parentName:"tr",align:null},"Frequency of checking circuit breaker"),(0,r.kt)("td",{parentName:"tr",align:null},"1000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.circuitBreaker.timeoutInSeconds"),(0,r.kt)("td",{parentName:"tr",align:null},"Optional timeout for OpenLineage execution (Since version 1.13)"),(0,r.kt)("td",{parentName:"tr",align:null},"90")))))),(0,r.kt)("h3",{id:"custom-circuit-breaker"},"Custom Circuit Breaker"),(0,r.kt)("p",null,"List of available circuit breakers can be extended with custom one loaded via ServiceLoader\nwith own implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"io.openlineage.client.circuitBreaker.CircuitBreakerBuilder"),"."))}p.isMDXComponent=!0},55154:(e,n,t)=>{t.d(n,{ZP:()=>p});var a=t(87462),r=(t(67294),t(3905)),i=t(74866),l=t(85162);const o={toc:[{value:"HTTP",id:"http",level:3},{value:"Configuration",id:"configuration",level:4},{value:"Behavior",id:"behavior",level:4},{value:"Examples",id:"examples",level:4},{value:"Kafka",id:"kafka",level:3},{value:"Configuration",id:"configuration-1",level:4},{value:"Behavior",id:"behavior-1",level:4},{value:"Notes",id:"notes",level:4},{value:"Examples",id:"examples-1",level:4},{value:"Kinesis",id:"kinesis",level:3},{value:"Configuration",id:"configuration-2",level:4},{value:"Behavior",id:"behavior-2",level:4},{value:"Examples",id:"examples-2",level:4},{value:"Console",id:"console",level:3},{value:"Behavior",id:"behavior-3",level:4},{value:"Notes",id:"notes-1",level:4},{value:"Configuration",id:"configuration-3",level:4},{value:"Examples",id:"examples-3",level:4},{value:"File",id:"file",level:3},{value:"Configuration",id:"configuration-4",level:4},{value:"Behavior",id:"behavior-4",level:4},{value:"Notes for Yarn/Kubernetes",id:"notes-for-yarnkubernetes",level:4},{value:"Examples",id:"examples-4",level:4}]};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},o,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Tip:")," See current list of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/tree/main/client/java/src/main/java/io/openlineage/client/transports"},"all supported transports"),"."),(0,r.kt)("h3",{id:"http"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/OpenLineage/OpenLineage/tree/main/client/java/src/main/java/io/openlineage/client/transports/HttpTransport.java"},"HTTP")),(0,r.kt)("p",null,"Allows sending events to HTTP endpoint, using ",(0,r.kt)("a",{parentName:"p",href:"https://hc.apache.org/index.html"},"ApacheHTTPClient"),"."),(0,r.kt)("h4",{id:"configuration"},"Configuration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - string, must be ",(0,r.kt)("inlineCode",{parentName:"li"},'"http"'),". Required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"url")," - string, base url for HTTP requests. Required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"endpoint")," - string specifying the endpoint to which events are sent, appended to ",(0,r.kt)("inlineCode",{parentName:"li"},"url"),". Optional, default: ",(0,r.kt)("inlineCode",{parentName:"li"},"/api/v1/lineage"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"urlParams")," - dictionary specifying query parameters send in HTTP requests. Optional."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"timeoutInMillis")," - integer specifying timeout (in milliseconds) value used while connecting to server. Optional, default: ",(0,r.kt)("inlineCode",{parentName:"li"},"5000"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"auth")," - dictionary specifying authentication options. Optional, by default no authorization is used. If set, requires the ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," property.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type"),' - string specifying the "api_key" or the fully qualified class name of your TokenProvider. Required if ',(0,r.kt)("inlineCode",{parentName:"li"},"auth")," is provided."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"apiKey")," - string setting the Authentication HTTP header as the Bearer. Required if ",(0,r.kt)("inlineCode",{parentName:"li"},"type")," is ",(0,r.kt)("inlineCode",{parentName:"li"},"api_key"),"."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"headers")," - dictionary specifying HTTP request headers. Optional."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"compression")," - string, name of algorithm used by HTTP client to compress request body. Optional, default value ",(0,r.kt)("inlineCode",{parentName:"li"},"null"),", allowed values: ",(0,r.kt)("inlineCode",{parentName:"li"},"gzip"),". Added in v1.13.0.")),(0,r.kt)("h4",{id:"behavior"},"Behavior"),(0,r.kt)("p",null,"Events are serialized to JSON, and then are send as HTTP POST request with ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Type: application/json"),"."),(0,r.kt)("h4",{id:"examples"},"Examples"),(0,r.kt)(i.Z,{groupId:"integrations",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"yaml",label:"Yaml Config",mdxType:"TabItem"},(0,r.kt)("p",null,"Anonymous connection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transport:\n  type: http\n  url: http://localhost:5000\n")),(0,r.kt)("p",null,"With authorization:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transport:\n  type: http\n  url: http://localhost:5000\n  auth:\n    type: api_key\n    api_key: f38d2189-c603-4b46-bdea-e573a3b5a7d5\n")),(0,r.kt)("p",null,"Full example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transport:\n  type: http\n  url: http://localhost:5000\n  endpoint: /api/v1/lineage\n  urlParams:\n    param0: value0\n    param1: value1\n  timeoutInMillis: 5000\n  auth:\n    type: api_key\n    api_key: f38d2189-c603-4b46-bdea-e573a3b5a7d5\n  headers:\n    X-Some-Extra-Header: abc\n  compression: gzip\n"))),(0,r.kt)(l.Z,{value:"spark",label:"Spark Config",mdxType:"TabItem"},(0,r.kt)("p",null,"Anonymous connection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"spark.openlineage.transport.type=http\nspark.openlineage.transport.url=http://localhost:5000\n")),(0,r.kt)("p",null,"With authorization:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"spark.openlineage.transport.type=http\nspark.openlineage.transport.url=http://localhost:5000\nspark.openlineage.transport.auth.type=api_key\nspark.openlineage.transport.auth.apiKey=f38d2189-c603-4b46-bdea-e573a3b5a7d5\n")),(0,r.kt)("p",null,"Full example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"spark.openlineage.transport.type=http\nspark.openlineage.transport.url=http://localhost:5000\nspark.openlineage.transport.endpoint=/api/v1/lineage\nspark.openlineage.transport.urlParams.param0=value0\nspark.openlineage.transport.urlParams.param1=value1\nspark.openlineage.transport.timeoutInMillis=5000\nspark.openlineage.transport.auth.type=api_key\nspark.openlineage.transport.auth.apiKey=f38d2189-c603-4b46-bdea-e573a3b5a7d5\nspark.openlineage.transport.headers.X-Some-Extra-Header=abc\nspark.openlineage.transport.compression=gzip\n")),(0,r.kt)("details",null,(0,r.kt)("summary",null,"URL parsing within Spark integration"),(0,r.kt)("p",null,(0,r.kt)("p",null,"You can supply http parameters using values in url, the parsed ",(0,r.kt)("inlineCode",{parentName:"p"},"spark.openlineage.*")," properties are located in url as follows:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"{transport.url}/{transport.endpoint}/namespaces/{namespace}/jobs/{parentJobName}/runs/{parentRunId}?app_name={appName}&api_key={transport.apiKey}&timeout={transport.timeout}&xxx={transport.urlParams.xxx}")),(0,r.kt)("p",null,"example:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:5000/api/v1/namespaces/ns_name/jobs/job_name/runs/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx?app_name=app&api_key=abc&timeout=5000&xxx=xxx"))))),(0,r.kt)(l.Z,{value:"flink",label:"Flink Config",mdxType:"TabItem"},(0,r.kt)("p",null,"Anonymous connection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"spark.openlineage.transport.type=http\nspark.openlineage.transport.url=http://localhost:5000\n")),(0,r.kt)("p",null,"With authorization:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"openlineage.transport.type=http\nopenlineage.transport.url=http://localhost:5000\nopenlineage.transport.auth.type=api_key\nopenlineage.transport.auth.apiKey=f38d2189-c603-4b46-bdea-e573a3b5a7d5\n")),(0,r.kt)("p",null,"Full example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"openlineage.transport.type=http\nopenlineage.transport.url=http://localhost:5000\nopenlineage.transport.endpoint=/api/v1/lineage\nopenlineage.transport.urlParams.param0=value0\nopenlineage.transport.urlParams.param1=value1\nopenlineage.transport.timeoutInMillis=5000\nopenlineage.transport.auth.type=api_key\nopenlineage.transport.auth.apiKey=f38d2189-c603-4b46-bdea-e573a3b5a7d5\nopenlineage.transport.headers.X-Some-Extra-Header=abc\nopenlineage.transport.compression=gzip\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java Code",mdxType:"TabItem"},(0,r.kt)("p",null,"Anonymous connection:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import io.openlineage.client.OpenLineageClient;\nimport io.openlineage.client.transports.HttpConfig;\nimport io.openlineage.client.transports.HttpTransport;\n\nHttpConfig httpConfig = new HttpConfig();\nhttpConfig.setUrl("http://localhost:5000");\n\nOpenLineageClient client = OpenLineageClient.builder()\n  .transport(\n    new HttpTransport(httpConfig))\n  .build();\n')),(0,r.kt)("p",null,"With authorization:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import io.openlineage.client.OpenLineageClient;\nimport io.openlineage.client.transports.ApiKeyTokenProvider;\nimport io.openlineage.client.transports.HttpConfig;\nimport io.openlineage.client.transports.HttpTransport;\n\nApiKeyTokenProvider apiKeyTokenProvider = new ApiKeyTokenProvider();\napiKeyTokenProvider.setApiKey("f38d2189-c603-4b46-bdea-e573a3b5a7d5");\n\nHttpConfig httpConfig = new HttpConfig();\nhttpConfig.setUrl("http://localhost:5000");\nhttpConfig.setAuth(apiKeyTokenProvider);\n\nOpenLineageClient client = OpenLineageClient.builder()\n  .transport(\n    new HttpTransport(httpConfig))\n  .build();\n')),(0,r.kt)("p",null,"Full example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.Map;\n\nimport io.openlineage.client.OpenLineageClient;\nimport io.openlineage.client.transports.ApiKeyTokenProvider;\nimport io.openlineage.client.transports.HttpConfig;\nimport io.openlineage.client.transports.HttpTransport;\n\nMap<String, String> queryParams = Map.of(\n    "param0", "value0",\n    "param1", "value1"\n);\n\nMap<String, String> headers = Map.of(\n  "X-Some-Extra-Header", "abc"\n);\n\nApiKeyTokenProvider apiKeyTokenProvider = new ApiKeyTokenProvider();\napiKeyTokenProvider.setApiKey("f38d2189-c603-4b46-bdea-e573a3b5a7d5");\n\nHttpConfig httpConfig = new HttpConfig();\nhttpConfig.setUrl("http://localhost:5000");\nhttpConfig.setEndpoint("/api/v1/lineage");\nhttpConfig.setUrlParams(queryParams);\nhttpConfig.setAuth(apiKeyTokenProvider);\nhttpConfig.setTimeoutInMillis(headers);\nhttpConfig.setHeaders(5000);\nhttpConfig.setCompression(HttpConfig.Compression.GZIP);\n\nOpenLineageClient client = OpenLineageClient.builder()\n  .transport(\n    new HttpTransport(httpConfig))\n  .build();\n')))),(0,r.kt)("h3",{id:"kafka"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/OpenLineage/OpenLineage/tree/main/client/java/src/main/java/io/openlineage/client/transports/KafkaTransport.java"},"Kafka")),(0,r.kt)("p",null,"If a transport type is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"kafka"),", then the below parameters would be read and used when building KafkaProducer.\nThis transport requires the artifact ",(0,r.kt)("inlineCode",{parentName:"p"},"org.apache.kafka:kafka-clients:3.1.0")," (or compatible) on your classpath."),(0,r.kt)("h4",{id:"configuration-1"},"Configuration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"type")," - string, must be ",(0,r.kt)("inlineCode",{parentName:"p"},'"kafka"'),". Required.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"topicName")," - string specifying the topic on what events will be sent. Required.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"properties")," - a dictionary containing a Kafka producer config as in ",(0,r.kt)("a",{parentName:"p",href:"http://kafka.apache.org/0100/documentation.html#producerconfigs"},"Kafka producer config"),". Required.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"localServerId")," - ",(0,r.kt)("strong",{parentName:"p"},"deprecated"),", renamed to ",(0,r.kt)("inlineCode",{parentName:"p"},"messageKey")," since v1.13.0.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"messageKey")," - string, key for all Kafka messages produced by transport. Optional, default value described below. Added in v1.13.0."),(0,r.kt)("p",{parentName:"li"},"Default values for ",(0,r.kt)("inlineCode",{parentName:"p"},"messageKey")," are:"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run:{parentJob.namespace}/{parentJob.name}")," - for RunEvent with parent facet"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run:{job.namespace}/{job.name}")," - for RunEvent"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"job:{job.namespace}/{job.name}")," - for JobEvent"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataset:{dataset.namespace}/{dataset.name}")," - for DatasetEvent")))),(0,r.kt)("h4",{id:"behavior-1"},"Behavior"),(0,r.kt)("p",null,"Events are serialized to JSON, and then dispatched to the Kafka topic."),(0,r.kt)("h4",{id:"notes"},"Notes"),(0,r.kt)("p",null,"It is recommended to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"messageKey")," if Job hierarchy is used. It can be any string, but it should be the same for all jobs in\nhierarchy, like ",(0,r.kt)("inlineCode",{parentName:"p"},"Airflow task -> Spark application -> Spark task runs"),"."),(0,r.kt)("h4",{id:"examples-1"},"Examples"),(0,r.kt)(i.Z,{groupId:"integrations",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"yaml",label:"Yaml Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transport:\n  type: kafka\n  topicName: openlineage.events\n  properties:\n    bootstrap.servers: localhost:9092,another.host:9092\n    acks: all\n    retries: 3\n    key.serializer: org.apache.kafka.common.serialization.StringSerializer\n    value.serializer: org.apache.kafka.common.serialization.StringSerializer\n  messageKey: some-value\n"))),(0,r.kt)(l.Z,{value:"spark",label:"Spark Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"spark.openlineage.transport.type=kafka\nspark.openlineage.transport.topicName=openlineage.events\nspark.openlineage.transport.properties.bootstrap.servers=localhost:9092,another.host:9092\nspark.openlineage.transport.properties.acks=all\nspark.openlineage.transport.properties.retries=3\nspark.openlineage.transport.properties.key.serializer=org.apache.kafka.common.serialization.StringSerializer\nspark.openlineage.transport.properties.value.serializer=org.apache.kafka.common.serialization.StringSerializer\nspark.openlineage.transport.messageKey=some-value\n"))),(0,r.kt)(l.Z,{value:"flink",label:"Flink Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"openlineage.transport.type=kafka\nopenlineage.transport.topicName=openlineage.events\nopenlineage.transport.properties.bootstrap.servers=localhost:9092,another.host:9092\nopenlineage.transport.properties.acks=all\nopenlineage.transport.properties.retries=3\nopenlineage.transport.properties.key.serializer=org.apache.kafka.common.serialization.StringSerializer\nopenlineage.transport.properties.value.serializer=org.apache.kafka.common.serialization.StringSerializer\nopenlineage.transport.messageKey=some-value\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.Properties;\n\nimport io.openlineage.client.OpenLineageClient;\nimport io.openlineage.client.transports.KafkaConfig;\nimport io.openlineage.client.transports.KafkaTransport;\n\nProperties kafkaProperties = new Properties();\nkafkaProperties.setProperty("bootstrap.servers", "localhost:9092,another.host:9092");\nkafkaProperties.setProperty("acks", "all");\nkafkaProperties.setProperty("retries", "3");\nkafkaProperties.setProperty("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");\nkafkaProperties.setProperty("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");\n\nKafkaConfig kafkaConfig = new KafkaConfig();\nKafkaConfig.setTopicName("openlineage.events");\nKafkaConfig.setProperties(kafkaProperties);\nKafkaConfig.setLocalServerId("some-value");\n\nOpenLineageClient client = OpenLineageClient.builder()\n  .transport(\n    new KafkaTransport(httpConfig))\n  .build();\n')))),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Notes"),":\nIt is recommended to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"messageKey")," if Job hierarchy is used. It can be any string, but it should be the same for all jobs in\nhierarchy, like ",(0,r.kt)("inlineCode",{parentName:"p"},"Airflow task -> Spark application"),"."),(0,r.kt)("p",null,"Default values are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run:{parentJob.namespace}/{parentJob.name}/{parentRun.id}")," - for RunEvent with parent facet"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"run:{job.namespace}/{job.name}/{run.id}")," - for RunEvent"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"job:{job.namespace}/{job.name}")," - for JobEvent"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"dataset:{dataset.namespace}/{dataset.name}")," - for DatasetEvent")),(0,r.kt)("h3",{id:"kinesis"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/OpenLineage/OpenLineage/blob/main/client/java/src/main/java/io/openlineage/client/transports/KinesisTransport.java"},"Kinesis")),(0,r.kt)("p",null,"If a transport type is set to ",(0,r.kt)("inlineCode",{parentName:"p"},"kinesis"),", then the below parameters would be read and used when building KinesisProducer.\nAlso, KinesisTransport depends on you to provide artifact ",(0,r.kt)("inlineCode",{parentName:"p"},"com.amazonaws:amazon-kinesis-producer:0.14.0")," or compatible on your classpath."),(0,r.kt)("h4",{id:"configuration-2"},"Configuration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - string, must be ",(0,r.kt)("inlineCode",{parentName:"li"},'"kinesis"'),". Required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"streamName")," - the streamName of the Kinesis. Required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"region")," - the region of the Kinesis. Required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"roleArn")," - the roleArn which is allowed to read/write to Kinesis stream. Optional."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"properties")," - a dictionary that contains a ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/awslabs/amazon-kinesis-producer/blob/master/java/amazon-kinesis-producer-sample/default_config.properties"},"Kinesis allowed properties"),". Optional.")),(0,r.kt)("h4",{id:"behavior-2"},"Behavior"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Events are serialized to JSON, and then dispatched to the Kinesis stream."),(0,r.kt)("li",{parentName:"ul"},"The partition key is generated as ",(0,r.kt)("inlineCode",{parentName:"li"},"{jobNamespace}:{jobName}"),"."),(0,r.kt)("li",{parentName:"ul"},"Two constructors are available: one accepting both ",(0,r.kt)("inlineCode",{parentName:"li"},"KinesisProducer")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"KinesisConfig")," and another solely accepting ",(0,r.kt)("inlineCode",{parentName:"li"},"KinesisConfig"),".")),(0,r.kt)("h4",{id:"examples-2"},"Examples"),(0,r.kt)(i.Z,{groupId:"integrations",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"yaml",label:"Yaml Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transport:\n  type: kinesis\n  streamName: your_kinesis_stream_name\n  region: your_aws_region\n  roleArn: arn:aws:iam::account-id:role/role-name\n  properties:\n    VerifyCertificate: true\n    ConnectTimeout: 6000\n"))),(0,r.kt)(l.Z,{value:"spark",label:"Spark Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"spark.openlineage.transport.type=kinesis\nspark.openlineage.transport.streamName=your_kinesis_stream_name\nspark.openlineage.transport.region=your_aws_region\nspark.openlineage.transport.roleArn=arn:aws:iam::account-id:role/role-name\nspark.openlineage.transport.properties.VerifyCertificate=true\nspark.openlineage.transport.properties.ConnectTimeout=6000\n"))),(0,r.kt)(l.Z,{value:"flink",label:"Flink Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"openlineage.transport.type=kinesis\nopenlineage.transport.streamName=your_kinesis_stream_name\nopenlineage.transport.region=your_aws_region\nopenlineage.transport.roleArn=arn:aws:iam::account-id:role/role-name\nopenlineage.transport.properties.VerifyCertificate=true\nopenlineage.transport.properties.ConnectTimeout=6000\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.Properties;\n\nimport io.openlineage.client.OpenLineageClient;\nimport io.openlineage.client.transports.KinesisConfig;\nimport io.openlineage.client.transports.KinesisTransport;\n\nProperties kinesisProperties = new Properties();\nkinesisProperties.setProperty("property_name_1", "value_1");\nkinesisProperties.setProperty("property_name_2", "value_2");\n\nKinesisConfig kinesisConfig = new KinesisConfig();\nkinesisConfig.setStreamName("your_kinesis_stream_name");\nkinesisConfig.setRegion("your_aws_region");\nkinesisConfig.setRoleArn("arn:aws:iam::account-id:role/role-name");\nkinesisConfig.setProperties(kinesisProperties);\n\nOpenLineageClient client = OpenLineageClient.builder()\n  .transport(\n    new KinesisTransport(httpConfig))\n  .build();\n')))),(0,r.kt)("h3",{id:"console"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/OpenLineage/OpenLineage/tree/main/client/java/src/main/java/io/openlineage/client/transports/ConsoleTransport.java"},"Console")),(0,r.kt)("p",null,"This straightforward transport emits OpenLineage events directly to the console through a logger.\nNo additional configuration is required."),(0,r.kt)("h4",{id:"behavior-3"},"Behavior"),(0,r.kt)("p",null,"Events are serialized to JSON. Then each event is logged with ",(0,r.kt)("inlineCode",{parentName:"p"},"INFO")," level to logger with name ",(0,r.kt)("inlineCode",{parentName:"p"},"ConsoleTransport"),"."),(0,r.kt)("h4",{id:"notes-1"},"Notes"),(0,r.kt)("p",null,"Be cautious when using the ",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG")," log level, as it might result in double-logging due to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OpenLineageClient")," also logging."),(0,r.kt)("h4",{id:"configuration-3"},"Configuration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - string, must be ",(0,r.kt)("inlineCode",{parentName:"li"},'"console"'),". Required.")),(0,r.kt)("h4",{id:"examples-3"},"Examples"),(0,r.kt)(i.Z,{groupId:"integrations",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"yaml",label:"Yaml Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transport:\n  type: console\n"))),(0,r.kt)(l.Z,{value:"spark",label:"Spark Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"spark.openlineage.transport.type=console\n"))),(0,r.kt)(l.Z,{value:"flink",label:"Flink Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"openlineage.transport.type=console\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"import java.util.Properties;\n\nimport io.openlineage.client.OpenLineageClient;\nimport io.openlineage.client.transports.ConsoleTransport;\n\nOpenLineageClient client = OpenLineageClient.builder()\n  .transport(\n    new ConsoleTransport())\n  .build();\n")))),(0,r.kt)("h3",{id:"file"},(0,r.kt)("a",{parentName:"h3",href:"https://github.com/OpenLineage/OpenLineage/tree/main/client/java/src/main/java/io/openlineage/client/transports/FileTransport.java"},"File")),(0,r.kt)("p",null,"Designed mainly for integration testing, the ",(0,r.kt)("inlineCode",{parentName:"p"},"FileTransport")," emits OpenLineage events to a given file."),(0,r.kt)("h4",{id:"configuration-4"},"Configuration"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," - string, must be ",(0,r.kt)("inlineCode",{parentName:"li"},'"file"'),". Required."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"location")," - string specifying the path of the file. Required.")),(0,r.kt)("h4",{id:"behavior-4"},"Behavior"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If the target file is absent, it's created."),(0,r.kt)("li",{parentName:"ul"},"Events are serialized to JSON, and then appended to a file, separated by newlines."),(0,r.kt)("li",{parentName:"ul"},"Intrinsic newline characters within the event JSON are eliminated to ensure one-line events.")),(0,r.kt)("h4",{id:"notes-for-yarnkubernetes"},"Notes for Yarn/Kubernetes"),(0,r.kt)("p",null,"This transport type is pretty useless on Spark/Flink applications deployed to Yarn or Kubernetes cluster:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Each executor will write file to a local filesystem of Yarn container/K8s pod. So resulting file will be removed when such container/pod is destroyed."),(0,r.kt)("li",{parentName:"ul"},"Kubernetes persistent volumes are not destroyed after pod removal. But all the executors will write to the same network disk in parallel, producing a broken file.")),(0,r.kt)("h4",{id:"examples-4"},"Examples"),(0,r.kt)(i.Z,{groupId:"integrations",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"yaml",label:"Yaml Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"transport:\n  type: file\n  location: /path/to/your/file\n"))),(0,r.kt)(l.Z,{value:"spark",label:"Spark Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"spark.openlineage.transport.type=file\nspark.openlineage.transport.location=/path/to/your/filext\n"))),(0,r.kt)(l.Z,{value:"flink",label:"Flink Config",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ini"},"openlineage.transport.type=file\nopenlineage.transport.location=/path/to/your/file\n"))),(0,r.kt)(l.Z,{value:"java",label:"Java Code",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import java.util.Properties;\n\nimport io.openlineage.client.OpenLineageClient;\nimport io.openlineage.client.transports.FileConfig;\nimport io.openlineage.client.transports.FileTransport;\n\nFileConfig fileConfig = new FileConfig("/path/to/your/file");\n\nOpenLineageClient client = OpenLineageClient.builder()\n  .transport(\n    new FileTransport(fileConfig))\n  .build();\n')))))}p.isMDXComponent=!0}}]);