"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9643],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=i,g=m["".concat(l,".").concat(u)]||m[u]||p[u]||o;return n?r.createElement(g,a(a({ref:t},d),{},{components:n})):r.createElement(g,a({ref:t},d))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92441:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const o={title:"Metrics Backends",sidebar_position:2},a=void 0,s={unversionedId:"development/developing/java/adding_metrics",id:"development/developing/java/adding_metrics",title:"Metrics Backends",description:"To integrate additional metrics backend into the OpenLineage client, implement the MeterRegistryFactory interface and ensure it is utilized by the MicrometerProvider's getMetricsBuilders method.",source:"@site/docs/development/developing/java/adding_metrics.md",sourceDirName:"development/developing/java",slug:"/development/developing/java/adding_metrics",permalink:"/docs/development/developing/java/adding_metrics",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/development/developing/java/adding_metrics.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Metrics Backends",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Logging",permalink:"/docs/development/developing/java/troubleshooting/logging"},next:{title:"Build",permalink:"/docs/development/developing/spark/setup"}},l={},c=[],d={toc:c};function p(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To integrate additional metrics backend into the OpenLineage client, implement the ",(0,i.kt)("inlineCode",{parentName:"p"},"MeterRegistryFactory")," interface and ensure it is utilized by the ",(0,i.kt)("inlineCode",{parentName:"p"},"MicrometerProvider"),"'s ",(0,i.kt)("inlineCode",{parentName:"p"},"getMetricsBuilders")," method."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"MeterRegistryFactory")," interface is designed to construct a ",(0,i.kt)("inlineCode",{parentName:"p"},"MeterRegistry")," object from the OpenLineage configuration map. This interface allows the integration of either custom implementations or existing ones provided by Micrometer."),(0,i.kt)("p",null,"If your metrics backend requires external dependencies (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"io.micrometer:micrometer-registry-otlp:latest"),"), add them to your project's build.gradle as compileOnly. This ensures they are available during compilation but optional at runtime."),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"ReflectionUtils.hasClass")," to check the existence of required classes on the classpath before using them. This prevents runtime failures due to missing dependencies."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'    if (ReflectionUtils.hasClass("io.micrometer.statsd.StatsdMeterRegistry")) {\n      builders.add(new StatsDMeterRegistryFactory());\n    }\n')))}p.isMDXComponent=!0}}]);