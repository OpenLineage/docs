"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8774],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(a),c=r,k=u["".concat(p,".").concat(c)]||u[c]||m[c]||l;return a?n.createElement(k,i(i({ref:t},d),{},{components:a})):n.createElement(k,i({ref:t},d))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},21026:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const l={sidebar_position:2,title:"Spark Config Parameters"},i=void 0,o={unversionedId:"integrations/spark/configuration/spark_conf",id:"integrations/spark/configuration/spark_conf",title:"Spark Config Parameters",description:"The following parameters can be specified:",source:"@site/docs/integrations/spark/configuration/spark_conf.md",sourceDirName:"integrations/spark/configuration",slug:"/integrations/spark/configuration/spark_conf",permalink:"/docs/integrations/spark/configuration/spark_conf",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/integrations/spark/configuration/spark_conf.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Spark Config Parameters"},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/docs/integrations/spark/configuration/usage"},next:{title:"Transport",permalink:"/docs/integrations/spark/configuration/transport"}},p={},s=[],d={toc:s};function m(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The following parameters can be specified:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Definition"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.transport.type"),(0,r.kt)("td",{parentName:"tr",align:null},"The transport type used for event emit, default type is ",(0,r.kt)("inlineCode",{parentName:"td"},"console")),(0,r.kt)("td",{parentName:"tr",align:null},"http")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.namespace"),(0,r.kt)("td",{parentName:"tr",align:null},"The default namespace to be applied for any jobs submitted"),(0,r.kt)("td",{parentName:"tr",align:null},"MyNamespace")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.parentJobNamespace"),(0,r.kt)("td",{parentName:"tr",align:null},"The job namespace to be used for the parent job facet"),(0,r.kt)("td",{parentName:"tr",align:null},"ParentJobNamespace")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.parentJobName"),(0,r.kt)("td",{parentName:"tr",align:null},"The job name to be used for the parent job facet"),(0,r.kt)("td",{parentName:"tr",align:null},"ParentJobName")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.parentRunId"),(0,r.kt)("td",{parentName:"tr",align:null},"The RunId of the parent job that initiated this Spark job"),(0,r.kt)("td",{parentName:"tr",align:null},"xxxx-xxxx-xxxx-xxxx")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.appName"),(0,r.kt)("td",{parentName:"tr",align:null},"Custom value overwriting Spark app name in events"),(0,r.kt)("td",{parentName:"tr",align:null},"AppName")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.facets.disabled"),(0,r.kt)("td",{parentName:"tr",align:null},"List of facets to disable, enclosed in ",(0,r.kt)("inlineCode",{parentName:"td"},"[]")," (required from 0.21.x) and separated by ",(0,r.kt)("inlineCode",{parentName:"td"},";"),", default is ",(0,r.kt)("inlineCode",{parentName:"td"},"[spark_unknown;spark.logicalPlan;]")," (currently must contain ",(0,r.kt)("inlineCode",{parentName:"td"},";"),")"),(0,r.kt)("td",{parentName:"tr",align:null},"[","spark_unknown;spark.logicalPlan","]")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.capturedProperties"),(0,r.kt)("td",{parentName:"tr",align:null},"comma separated list of properties to be captured in spark properties facet (default ",(0,r.kt)("inlineCode",{parentName:"td"},"spark.master"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"spark.app.name"),")"),(0,r.kt)("td",{parentName:"tr",align:null},'"spark.example1,spark.example2"')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.dataset.removePath.pattern"),(0,r.kt)("td",{parentName:"tr",align:null},"Java regular expression that removes ",(0,r.kt)("inlineCode",{parentName:"td"},"?<remove>")," named group from dataset path. Can be used to last path subdirectories from paths like ",(0,r.kt)("inlineCode",{parentName:"td"},"s3://my-whatever-path/year=2023/month=04")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"(.*)(?<remove>\\/.*\\/.*)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.jobName.appendDatasetName"),(0,r.kt)("td",{parentName:"tr",align:null},"Decides whether output dataset name should be appended to job name. By default ",(0,r.kt)("inlineCode",{parentName:"td"},"true"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.jobName.replaceDotWithUnderscore"),(0,r.kt)("td",{parentName:"tr",align:null},"Replaces dots in job name with underscore. Can be used to mimic legacy behaviour on Databricks platform. By default ",(0,r.kt)("inlineCode",{parentName:"td"},"false"),"."),(0,r.kt)("td",{parentName:"tr",align:null},"false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.debugFacet"),(0,r.kt)("td",{parentName:"tr",align:null},"Determines whether debug facet shall be generated and included within the event. Set ",(0,r.kt)("inlineCode",{parentName:"td"},"enabled")," to turn it on. By default, facet is disabled."),(0,r.kt)("td",{parentName:"tr",align:null},"enabled")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"spark.openlineage.job.owners.<ownership-type",">"),(0,r.kt)("td",{parentName:"tr",align:null},"Specifies ownership of the job. Multiple entries with different types are allowed. Config key name and value are used to create job ownership type and name (available since 1.13)."),(0,r.kt)("td",{parentName:"tr",align:null},'spark.openlineage.job.owners.team="Some Team"')))))}m.isMDXComponent=!0}}]);