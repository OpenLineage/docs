"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1871],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),m=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=m(a),c=r,k=u["".concat(p,".").concat(c)]||u[c]||d[c]||i;return a?n.createElement(k,o(o({ref:t},s),{},{components:a})):n.createElement(k,o({ref:t},s))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=a[m];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},35946:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var n=a(87462),r=(a(67294),a(3905));const i={title:"1.14.0",sidebar_position:9943},o="1.14.0 - 2024-05-09",l={unversionedId:"releases/1_14_0",id:"releases/1_14_0",title:"1.14.0",description:"Added",source:"@site/docs/releases/1_14_0.md",sourceDirName:"releases",slug:"/releases/1_14_0",permalink:"/docs/releases/1_14_0",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/releases/1_14_0.md",tags:[],version:"current",sidebarPosition:9943,frontMatter:{title:"1.14.0",sidebar_position:9943},sidebar:"tutorialSidebar",previous:{title:"OpenLineage Proxy",permalink:"/docs/development/ol-proxy"},next:{title:"1.13.1",permalink:"/docs/releases/1_13_1"}},p={},m=[{value:"Added",id:"added",level:3},{value:"Removed",id:"removed",level:3},{value:"Changed",id:"changed",level:3},{value:"Fixed",id:"fixed",level:3}],s={toc:m};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1140---2024-05-09"},"1.14.0 - 2024-05-09"),(0,r.kt)("h3",{id:"added"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Common/dbt: add DREMIO to supported dbt profile types")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2674"},(0,r.kt)("inlineCode",{parentName:"a"},"#2674"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/surisimran"},"@surisimran"),(0,r.kt)("br",{parentName:"li"}),"*Adds support for dbt-dremio, resolving ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/issues/2668"},(0,r.kt)("inlineCode",{parentName:"a"},"#2668")),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Flink: support Protobuf format for sources and sinks")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2482"},(0,r.kt)("inlineCode",{parentName:"a"},"#2482"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds schema extraction from Protobuf classes. Includes support for nested object types, ",(0,r.kt)("inlineCode",{parentName:"em"},"array")," type, ",(0,r.kt)("inlineCode",{parentName:"em"},"map")," type, ",(0,r.kt)("inlineCode",{parentName:"em"},"oneOf")," and ",(0,r.kt)("inlineCode",{parentName:"em"},"any"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Java: add facet conversion test")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2663"},(0,r.kt)("inlineCode",{parentName:"a"},"#2663"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/julienledem"},"@julienledem"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds a simple test that shows how to deserialize a facet in the server model.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: job type facet to distinguish RDD jobs from Spark SQL jobs")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2652"},(0,r.kt)("inlineCode",{parentName:"a"},"#2652"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Sets the ",(0,r.kt)("inlineCode",{parentName:"em"},"jobType")," property of ",(0,r.kt)("inlineCode",{parentName:"em"},"JobTypeJobFacet")," to either ",(0,r.kt)("inlineCode",{parentName:"em"},"SQL_JOB")," or ",(0,r.kt)("inlineCode",{parentName:"em"},"RDD_JOB"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: add Glue symlink if reading from Glue catalog table")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2646"},(0,r.kt)("inlineCode",{parentName:"a"},"#2646"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/mobuchowski"},"@mobuchowski"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"The dataset symlink now points to the Glue catalog table name if the Glue catalog table is used.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: add spark_jobDetails facet")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2662"},(0,r.kt)("inlineCode",{parentName:"a"},"#2662"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds a ",(0,r.kt)("inlineCode",{parentName:"em"},"SparkJobDetailsFacet"),", capturing information about Spark application jobs -- e.g. ",(0,r.kt)("inlineCode",{parentName:"em"},"jobId"),", ",(0,r.kt)("inlineCode",{parentName:"em"},"jobDescription"),", ",(0,r.kt)("inlineCode",{parentName:"em"},"jobGroup"),", ",(0,r.kt)("inlineCode",{parentName:"em"},"jobCallSite"),". This allows for tracking an OpenLineage ",(0,r.kt)("inlineCode",{parentName:"em"},"RunEvent")," with a specific Spark job in SparkUI."))),(0,r.kt)("h3",{id:"removed"},"Removed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Airflow: drop old ParentRunFacet key")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2660"},(0,r.kt)("inlineCode",{parentName:"a"},"#2660"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Changes the integration to use the ",(0,r.kt)("inlineCode",{parentName:"em"},"parent")," key for ",(0,r.kt)("inlineCode",{parentName:"em"},"ParentFacet"),", dropping the outdated ",(0,r.kt)("inlineCode",{parentName:"em"},"parentRun"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: drop SparkVersionFacet")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2659"},(0,r.kt)("inlineCode",{parentName:"a"},"#2659"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Drops the ",(0,r.kt)("inlineCode",{parentName:"em"},"SparkVersion")," facet, deprecated since 1.2.0 and planned for removal since 1.4.0.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Python: allow relative paths in URI formats for Python facets")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2679"},(0,r.kt)("inlineCode",{parentName:"a"},"#2679"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/JDarDagran"},"@JDarDagran"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Removes a URI validator that checked if scheme and netloc were present, allowing relative paths in URI formats for Python facets."))),(0,r.kt)("h3",{id:"changed"},"Changed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"GreatExpectations: rename ",(0,r.kt)("inlineCode",{parentName:"strong"},"ParentRunFacet")," key")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2661"},(0,r.kt)("inlineCode",{parentName:"a"},"#2661"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"The OpenLineage spec defined the ",(0,r.kt)("inlineCode",{parentName:"em"},"ParentRunFacet")," with the property name parent but the Great Expectations integration created a lineage event with ",(0,r.kt)("inlineCode",{parentName:"em"},"parentRun"),". This renames ",(0,r.kt)("inlineCode",{parentName:"em"},"ParentRunFacet")," key from ",(0,r.kt)("inlineCode",{parentName:"em"},"parentRun")," to ",(0,r.kt)("inlineCode",{parentName:"em"},"parent"),". For backwards compatibility, keep the old name."))),(0,r.kt)("h3",{id:"fixed"},"Fixed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"dbt: support a less ambiguous logic to generate job names")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2658"},(0,r.kt)("inlineCode",{parentName:"a"},"#2658"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/blacklight"},"@blacklight"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Includes profile and models in the dbt job name to make it more unique.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: update to use org.apache.commons.lang3 instead of org.apache.commons.lang")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2676"},(0,r.kt)("inlineCode",{parentName:"a"},"#2676"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/harels"},"@harels"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Updates Apache Commons Lang to the latest version. We were mixing two versions, and the old one was not present in many places."))))}d.isMDXComponent=!0}}]);