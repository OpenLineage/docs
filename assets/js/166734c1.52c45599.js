"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6385],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>d});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(t),d=i,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return t?a.createElement(g,o(o({ref:n},l),{},{components:t})):a.createElement(g,o({ref:n},l))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},54528:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>p,toc:()=>c});var a=t(87462),i=(t(67294),t(3905));const r={title:"Example Lineage Events",sidebar_position:2},o=void 0,p={unversionedId:"development/examples",id:"development/examples",title:"Example Lineage Events",description:"Simple Examples",source:"@site/docs/development/examples.md",sourceDirName:"development",slug:"/development/examples",permalink:"/docs/development/examples",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/development/examples.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Example Lineage Events",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Integrating with Spark extensions",permalink:"/docs/development/developing/spark/built_in_lineage"},next:{title:"OpenLineage Proxy",permalink:"/docs/development/ol-proxy"}},s={},c=[{value:"Simple Examples",id:"simple-examples",level:2},{value:"START event with single input",id:"start-event-with-single-input",level:3},{value:"COMPLETE event with single output",id:"complete-event-with-single-output",level:3},{value:"Complex Examples",id:"complex-examples",level:2},{value:"START event with Facets (run and job)",id:"start-event-with-facets-run-and-job",level:3},{value:"COMPLETE event with Facets (dataset)",id:"complete-event-with-facets-dataset",level:3}],l={toc:c};function u(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"simple-examples"},"Simple Examples"),(0,i.kt)("h3",{id:"start-event-with-single-input"},"START event with single input"),(0,i.kt)("p",null,"This is a START event with a single PostgreSQL input dataset."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "eventType": "START",\n  "eventTime": "2020-12-28T19:52:00.001+10:00",\n  "run": {\n    "runId": "d46e465b-d358-4d32-83d4-df660ff614dd"\n  },\n  "job": {\n    "namespace": "workshop",\n    "name": "process_taxes"\n  },\n  "inputs": [{\n    "namespace": "postgres://workshop-db:None",\n    "name": "workshop.public.taxes"\n  }],  \n  "producer": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client"\n}\n')),(0,i.kt)("h3",{id:"complete-event-with-single-output"},"COMPLETE event with single output"),(0,i.kt)("p",null,"This is a COMPLETE event with a single PostgreSQL output dataset."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "eventType": "COMPLETE",\n  "eventTime": "2020-12-28T20:52:00.001+10:00",\n  "run": {\n    "runId": "d46e465b-d358-4d32-83d4-df660ff614dd"\n  },\n  "job": {\n    "namespace": "workshop",\n    "name": "process_taxes"\n  },\n  "outputs": [{\n    "namespace": "postgres://workshop-db:None",\n    "name": "workshop.public.unpaid_taxes"\n  }],     \n  "producer": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client"\n}\n')),(0,i.kt)("h2",{id:"complex-examples"},"Complex Examples"),(0,i.kt)("h3",{id:"start-event-with-facets-run-and-job"},"START event with Facets (run and job)"),(0,i.kt)("p",null,"This is a START event with run and job facets of Apache Airflow."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "eventType": "START",\n  "eventTime": "2020-12-28T19:52:00.001+10:00",\n  "run": {\n    "runId": "d46e465b-d358-4d32-83d4-df660ff614dd"\n    "facets": {\n      "airflow_runArgs": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.10.0/integration/airflow",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/BaseFacet",\n        "externalTrigger": true\n      },\n      "nominalTime": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.10.0/integration/airflow",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/NominalTimeRunFacet",\n        "nominalStartTime": "2022-07-29T14:14:31.458067Z"\n      },\n      "parentRun": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.10.0/integration/airflow",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/ParentRunFacet",\n        "job": {\n          "name": "etl_orders",\n          "namespace": "cosmic_energy"\n        },\n        "run": {\n          "runId": "1ba6fdaa-fb80-36ce-9c5b-295f544ec462"\n        }\n      }\n    }\n  },\n  "job": {\n    "namespace": "workshop",\n    "name": "process_taxes",\n    "facets": {\n      "documentation": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.10.0/integration/airflow",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/DocumentationJobFacet",\n        "description": "Process taxes."\n      },\n      "sql": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.10.0/integration/airflow",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/SqlJobFacet",\n        "query": "INSERT into taxes values(1, 100, 1000, 4000);"\n      }\n    },\n  },\n  "inputs": [{\n    "namespace": "postgres://workshop-db:None",\n    "name": "workshop.public.taxes"\n  }],  \n  "producer": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client"\n}\n')),(0,i.kt)("h3",{id:"complete-event-with-facets-dataset"},"COMPLETE event with Facets (dataset)"),(0,i.kt)("p",null,"This is a COMPLETE event with dataset facet of Database table."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "eventType": "COMPLETE",\n  "eventTime": "2020-12-28T20:52:00.001+10:00",\n  "run": {\n    "runId": "d46e465b-d358-4d32-83d4-df660ff614dd"\n  },\n  "job": {\n    "namespace": "workshop",\n    "name": "process_taxes"\n  },\n  "outputs": [{\n    "namespace": "postgres://workshop-db:None",\n    "name": "workshop.public.unpaid_taxes",\n    "facets": {\n        "dataSource": {\n          "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.10.0/integration/airflow",\n          "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/DataSourceDatasetFacet",\n          "name": "postgres://workshop-db:None",\n          "uri": "workshop-db"\n        },\n        "schema": {\n          "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.10.0/integration/airflow",\n          "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/SchemaDatasetFacet",\n          "fields": [\n            {\n              "name": "id",\n              "type": "SERIAL PRIMARY KEY"\n            },\n            {\n              "name": "tax_dt",\n              "type": "TIMESTAMP NOT NULL"\n            },\n            {\n              "name": "tax_item_id",\n              "type": "INTEGER REFERENCES tax_itemsid"\n            },\n            {\n              "name": "amount",\n              "type": "INTEGER NOT NULL"\n            },\n            {\n              "name": "ref_id",\n              "type": "INTEGER REFERENCES refid"\n            },\n            {\n              "name": "comment",\n              "type": "TEXT"\n            }\n          ]\n        }\n      }\n  }],     \n  "producer": "https://github.com/OpenLineage/OpenLineage/blob/v1-0-0/client"\n}\n')))}u.isMDXComponent=!0}}]);