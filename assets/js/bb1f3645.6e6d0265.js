"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7111],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>c});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),u=s(a),c=r,k=u["".concat(p,".").concat(c)]||u[c]||d[c]||i;return a?n.createElement(k,l(l({ref:t},m),{},{components:a})):n.createElement(k,l({ref:t},m))}));function c(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},57514:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const i={title:"1.19.0",sidebar_position:9938},l="1.19.0 - 2024-07-22",o={unversionedId:"releases/1_19_0",id:"releases/1_19_0",title:"1.19.0",description:"Added",source:"@site/docs/releases/1_19_0.md",sourceDirName:"releases",slug:"/releases/1_19_0",permalink:"/docs/releases/1_19_0",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/releases/1_19_0.md",tags:[],version:"current",sidebarPosition:9938,frontMatter:{title:"1.19.0",sidebar_position:9938},sidebar:"tutorialSidebar",previous:{title:"OpenLineage Proxy",permalink:"/docs/development/ol-proxy"},next:{title:"1.18.0",permalink:"/docs/releases/1_18_0"}},p={},s=[{value:"Added",id:"added",level:3},{value:"Fixed",id:"fixed",level:3}],m={toc:s};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"1190---2024-07-22"},"1.19.0 - 2024-07-22"),(0,r.kt)("h3",{id:"added"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Airflow: add ",(0,r.kt)("inlineCode",{parentName:"strong"},"log_url")," to ",(0,r.kt)("inlineCode",{parentName:"strong"},"AirflowRunFacet"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2852"},(0,r.kt)("inlineCode",{parentName:"a"},"#2852"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds taskinstance's ",(0,r.kt)("inlineCode",{parentName:"em"},"log_url")," field to ",(0,r.kt)("inlineCode",{parentName:"em"},"AirflowRunFacet"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: add handling for ",(0,r.kt)("inlineCode",{parentName:"strong"},"Generate"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2856"},(0,r.kt)("inlineCode",{parentName:"a"},"#2856"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/tnazarew"},"@tnazarew"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds handling for ",(0,r.kt)("inlineCode",{parentName:"em"},"Generate"),"-type nodes of a logical plan (e.g., explode operations).")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Java: add ",(0,r.kt)("inlineCode",{parentName:"strong"},"DerbyJdbcExtractor"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2869"},(0,r.kt)("inlineCode",{parentName:"a"},"#2869"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds ",(0,r.kt)("inlineCode",{parentName:"em"},"JdbcExtractor")," implementation for Derby database. As this is a file-based DBMS, its Dataset namespace is ",(0,r.kt)("inlineCode",{parentName:"em"},"file")," and name is an absolute path to a database file.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: verify bytecode version of the built jar.")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2859"},(0,r.kt)("inlineCode",{parentName:"a"},"#2859"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Extends the ",(0,r.kt)("inlineCode",{parentName:"em"},"JarVerifier")," plugin to ensure all compiled classes have a bytecode version of Java 8 or lower.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: add Kafka streaming source support")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2851"},(0,r.kt)("inlineCode",{parentName:"a"},"#2851"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/d-m-h"},"@d-m-h")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/Imbruced"},"@imbruced"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds support for Kafka streaming sources to Kafka streaming sinks. Inputs and outputs are now included in lineage events."))),(0,r.kt)("h3",{id:"fixed"},"Fixed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Airflow: replace datetime.now with airflow.utils.timezone.utcnow")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2865"},(0,r.kt)("inlineCode",{parentName:"a"},"#2865"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/kacpermuda"},"@kacpermuda"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Fixes missing timezone information in task FAIL events.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: remove shaded dependency in ",(0,r.kt)("inlineCode",{parentName:"strong"},"ColumnLevelLineageBuilder"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2850"},(0,r.kt)("inlineCode",{parentName:"a"},"#2850"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/tnazarew"},"@tnazarew"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Removes the shaded ",(0,r.kt)("inlineCode",{parentName:"em"},"Streams")," dependency in ",(0,r.kt)("inlineCode",{parentName:"em"},"ColumnLevelLineageBuilder")," causing a ",(0,r.kt)("inlineCode",{parentName:"em"},"ClassNotFoundException"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: make Delta dataset symlink consistent with non-Delta tables")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2863"},(0,r.kt)("inlineCode",{parentName:"a"},"#2863"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/dolfinus"},"@dolfinus"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Makes dataset symlinks for Delta and non-Delta tables consistent.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: use Table's properties during column-level lineage construction")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2855"},(0,r.kt)("inlineCode",{parentName:"a"},"#2855"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ddebowczyk92"},"@ddebowczyk92"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Fixes ",(0,r.kt)("inlineCode",{parentName:"em"},"PlanUtils3")," so Dataset identifier information based on a Table's properties is also retrieved during the construction of column-level lineage.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Spark: extract job name creation to providers")," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2861"},(0,r.kt)("inlineCode",{parentName:"a"},"#2861"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/arturowczarek"},"@arturowczarek"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"The integration now detects if the ",(0,r.kt)("inlineCode",{parentName:"em"},"spark.app.name")," was autogenerated by Glue and uses the Glue job name in such cases. Also, each job name provisioning strategy is now extracted to a separate provider."))))}d.isMDXComponent=!0}}]);