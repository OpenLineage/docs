"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6873],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>d});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),h=s(a),d=i,c=h["".concat(p,".").concat(d)]||h[d]||u[d]||r;return a?n.createElement(c,l(l({ref:t},m),{},{components:a})):n.createElement(c,l({ref:t},m))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,l=new Array(r);l[0]=h;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var s=2;s<r;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}h.displayName="MDXCreateElement"},44312:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>s});var n=a(87462),i=(a(67294),a(3905));const r={title:"1.10.2",sidebar_position:9947},l="1.10.2 - 2024-03-15",o={unversionedId:"releases/1_10_2",id:"releases/1_10_2",title:"1.10.2",description:"Added",source:"@site/docs/releases/1_10_2.md",sourceDirName:"releases",slug:"/releases/1_10_2",permalink:"/docs/releases/1_10_2",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/releases/1_10_2.md",tags:[],version:"current",sidebarPosition:9947,frontMatter:{title:"1.10.2",sidebar_position:9947},sidebar:"tutorialSidebar",previous:{title:"1.11.3",permalink:"/docs/releases/1_11_3"},next:{title:"1.9.1",permalink:"/docs/releases/1_9_1"}},p={},s=[{value:"Added",id:"added",level:3},{value:"Removed",id:"removed",level:3},{value:"Fixed",id:"fixed",level:3}],m={toc:s};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"1102---2024-03-15"},"1.10.2 - 2024-03-15"),(0,i.kt)("h3",{id:"added"},"Added"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Dagster: add new provider for version 1.6.10")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2518"},(0,i.kt)("inlineCode",{parentName:"a"},"#2518"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/JDarDagran"},"@JDarDagran"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Adds the new provider required by the latest version of Dagster.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: support lineage for a hybrid source")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2491"},(0,i.kt)("inlineCode",{parentName:"a"},"#2491"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/HuangZhenQiu"},"@HuangZhenQiu"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Adds support for hybrid source lineage for users of Kafka and Iceberg sources in backfill usecases.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: improve Cassandra lineage metadata")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2479"},(0,i.kt)("inlineCode",{parentName:"a"},"#2479"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/HuangZhenQiu"},"@HuangZhenQiu"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Cassandra cluster info to be used as the dataset namespace, and the keyspace to be combined with the table name as the dataset name.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: bump Flink JDBC connector version")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2472"},(0,i.kt)("inlineCode",{parentName:"a"},"#2472"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/HuangZhenQiu"},"@HuangZhenQiu"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Bumps the Flink JDBC connector version to 3.1.2-1.18 for Flink 1.18.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Java: add a ",(0,i.kt)("inlineCode",{parentName:"strong"},"OpenLineageClientUtils#loadOpenLineageJson(InputStream)")," and change ",(0,i.kt)("inlineCode",{parentName:"strong"},"OpenLineageClientUtils#loadOpenLineageYaml(InputStream)")," methods")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2490"},(0,i.kt)("inlineCode",{parentName:"a"},"#2490"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/d-m-h"},"@d-m-h"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"This improves the explicitness of the methods. Previously, ",(0,i.kt)("inlineCode",{parentName:"em"},"loadOpenLineageYaml(InputStream)")," wanted the ",(0,i.kt)("inlineCode",{parentName:"em"},"InputStream")," to contain bytes that represented JSON.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Java: add info from the HTTP response to the client exception")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2486"},(0,i.kt)("inlineCode",{parentName:"a"},"#2486"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/davidjgoss"},"@davidjgoss"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Adds the status code and body as properties on the thrown exception when a non-success response is encountered in the HTTP transport.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Python: add support for MSK IAM authentication with a new transport")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2478"},(0,i.kt)("inlineCode",{parentName:"a"},"#2478"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/mattiabertorello"},"@mattiabertorello"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Eases publication of events to MSK with IAM authentication."))),(0,i.kt)("h3",{id:"removed"},"Removed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Airflow: remove redundant information from facets")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2524"},(0,i.kt)("inlineCode",{parentName:"a"},"#2524"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/kacpermuda"},"@kacpermuda"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Refines the operator's attribute inclusion logic in facets to include only those known to be important or compact, ensuring that custom operator attributes with substantial data do not inflate the event size."))),(0,i.kt)("h3",{id:"fixed"},"Fixed"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Airflow: proceed without rendering templates if ",(0,i.kt)("inlineCode",{parentName:"strong"},"task_instance")," copy fails")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2492"},(0,i.kt)("inlineCode",{parentName:"a"},"#2492"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/kacpermuda"},"@kacpermuda"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Airflow will now proceed without rendering templates if ",(0,i.kt)("inlineCode",{parentName:"em"},"task_instance")," copy fails in ",(0,i.kt)("inlineCode",{parentName:"em"},"listener.on_task_instance_running"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: fix the ",(0,i.kt)("inlineCode",{parentName:"strong"},"HttpTransport")," timeout")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2475"},(0,i.kt)("inlineCode",{parentName:"a"},"#2475"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"The existing ",(0,i.kt)("inlineCode",{parentName:"em"},"timeout")," config parameter is ambiguous: implementation treats the value as double in seconds, although the documentation claims it's milliseconds. A new config param ",(0,i.kt)("inlineCode",{parentName:"em"},"timeoutInMillis")," has been added. the Existing ",(0,i.kt)("inlineCode",{parentName:"em"},"timeout")," has been removed from docs and will be deprecated in 1.13.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spark: prevent NPE if the context is null")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2515"},(0,i.kt)("inlineCode",{parentName:"a"},"#2515"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Adds a check for a null context before executing ",(0,i.kt)("inlineCode",{parentName:"em"},"end(jobEnd)"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: fix class not found issue for Cassandra")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2507"},(0,i.kt)("inlineCode",{parentName:"a"},"#2507"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Fixes the class not found issue when checking for Cassandra classes. Also fixes the Maven POM dependency on subprojects.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: refine the JDBC table name")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2512"},(0,i.kt)("inlineCode",{parentName:"a"},"#2512"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/HuangZhenQiu"},"@HuangZhenQiu"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Enables the JDBC table name with a schema prefix.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: fix JDBC dataset naming")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2508"},(0,i.kt)("inlineCode",{parentName:"a"},"#2508"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"For JDBC, the Flink integration is not adjusted to the Openlineage naming convention. There is code that extracts the dataset namespace/name from the JDBC connection url, but it's in the Spark integration. As a solution, this code has to be extracted into the Java client and reused by the Spark and Flink integrations.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: fix failure due to missing Cassandra classes")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2507"},(0,i.kt)("inlineCode",{parentName:"a"},"#2507"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Flink is failing when no Cassandra classes are present on the class path. This is happening because of ",(0,i.kt)("inlineCode",{parentName:"em"},"CassandraUtils")," class which has a static ",(0,i.kt)("inlineCode",{parentName:"em"},"hasClasses")," method, but it imports Cassandra-related classes in the header. Also, the Flink subproject contains an unnecessary ",(0,i.kt)("inlineCode",{parentName:"em"},"maven-publish")," plugin.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Flink: fix release runtime dependencies")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2504"},(0,i.kt)("inlineCode",{parentName:"a"},"#2504"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/HuangZhenQiu"},"@HuangZhenQiu"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"The shadow jar of Flink is not minimized, so some internal jars are listed as runtime dependences. This removes them from the final pom.xml file in the Flink module.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Spec: improve Cassandra lineage metadata")," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/2479"},(0,i.kt)("inlineCode",{parentName:"a"},"#2479"))," ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/HuangZhenQiu"},"@HuangZhenQiu"),(0,i.kt)("br",{parentName:"li"}),"",(0,i.kt)("em",{parentName:"li"},"Following the namespace definition, we should use ",(0,i.kt)("inlineCode",{parentName:"em"},"cassandra://host:port"),"."))))}u.isMDXComponent=!0}}]);