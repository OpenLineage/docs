"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1115],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,h=d["".concat(p,".").concat(u)]||d[u]||c[u]||i;return a?n.createElement(h,o(o({ref:t},m),{},{components:a})):n.createElement(h,o({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9841:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={title:"0.13.0",sidebar_position:9980},o="0.13.0 - 2022-08-22",l={unversionedId:"releases/0_13_0",id:"releases/0_13_0",title:"0.13.0",description:"Added",source:"@site/docs/releases/0_13_0.md",sourceDirName:"releases",slug:"/releases/0_13_0",permalink:"/docs/releases/0_13_0",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/releases/0_13_0.md",tags:[],version:"current",sidebarPosition:9980,frontMatter:{title:"0.13.0",sidebar_position:9980},sidebar:"tutorialSidebar",previous:{title:"0.13.1",permalink:"/docs/releases/0_13_1"},next:{title:"0.12.0",permalink:"/docs/releases/0_12_0"}},p={},s=[{value:"Added",id:"added",level:3},{value:"Changed",id:"changed",level:3},{value:"Fixed",id:"fixed",level:3}],m={toc:s};function c(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"0130---2022-08-22"},"0.13.0 - 2022-08-22"),(0,r.kt)("h3",{id:"added"},"Added"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add BigQuery check support ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/960"},(0,r.kt)("inlineCode",{parentName:"a"},"#960"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/denimalpaca"},"@denimalpaca"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds logic and support for proper dynamic class inheritance for BigQuery-style operators. (BigQuery's extractor needed additional logic to support the forthcoming ",(0,r.kt)("inlineCode",{parentName:"em"},"BigQueryColumnCheckOperator")," and ",(0,r.kt)("inlineCode",{parentName:"em"},"BigQueryTableCheckOperator"),".)")),(0,r.kt)("li",{parentName:"ul"},"Add ",(0,r.kt)("inlineCode",{parentName:"li"},"RUNNING")," ",(0,r.kt)("inlineCode",{parentName:"li"},"EventType")," in spec and Python client ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/972"},(0,r.kt)("inlineCode",{parentName:"a"},"#972"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/mzareba382"},"@mzareba382"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Introduces a ",(0,r.kt)("inlineCode",{parentName:"em"},"RUNNING")," event state in the OpenLineage spec to indicate a running task and adds a ",(0,r.kt)("inlineCode",{parentName:"em"},"RUNNING")," event type in the Python API.")),(0,r.kt)("li",{parentName:"ul"},"Use databases & schemas in SQL Extractors ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/974"},(0,r.kt)("inlineCode",{parentName:"a"},"#974"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/JDarDagran"},"@JDarDagran"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Allows the Airflow integration to differentiate between databases and schemas. (There was no notion of databases and schemas when querying and parsing results from ",(0,r.kt)("inlineCode",{parentName:"em"},"information_schema")," tables.)")),(0,r.kt)("li",{parentName:"ul"},"Implement Event forwarding feature via HTTP protocol ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/995"},(0,r.kt)("inlineCode",{parentName:"a"},"#995"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/howardyoo"},"@howardyoo"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds ",(0,r.kt)("inlineCode",{parentName:"em"},"HttpLineageStream")," to forward a given OpenLineage event to any HTTP endpoint.")),(0,r.kt)("li",{parentName:"ul"},"Introduce ",(0,r.kt)("inlineCode",{parentName:"li"},"SymlinksDatasetFacet")," to spec ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/936"},(0,r.kt)("inlineCode",{parentName:"a"},"#936"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/pawel-big-lebowski"},"@pawel-big-lebowski"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Creates a new facet, the ",(0,r.kt)("inlineCode",{parentName:"em"},"SymlinksDatasetFacet"),", to support the storing of alternative dataset names.")),(0,r.kt)("li",{parentName:"ul"},"Add Azure Cosmos Handler to Spark integration ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/983"},(0,r.kt)("inlineCode",{parentName:"a"},"#983"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/hmoazam"},"@hmoazam"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Defines a new interface, the ",(0,r.kt)("inlineCode",{parentName:"em"},"RelationHandler"),", to support Spark data sources that do not have ",(0,r.kt)("inlineCode",{parentName:"em"},"TableCatalog"),", ",(0,r.kt)("inlineCode",{parentName:"em"},"Identifier"),", or ",(0,r.kt)("inlineCode",{parentName:"em"},"TableProperties")," set, as is the case with the Azure Cosmos DB Spark connector.")),(0,r.kt)("li",{parentName:"ul"},"Support OL Datasets in manual lineage inputs/outputs ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/1015"},(0,r.kt)("inlineCode",{parentName:"a"},"#1015"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/conorbev"},"@conorbev"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Allows Airflow users to create OpenLineage Dataset classes directly in DAGs with no conversion necessary. (Manual lineage definition required users to create an ",(0,r.kt)("inlineCode",{parentName:"em"},"airflow.lineage.entities.Table"),", which was then converted to an OpenLineage Dataset.)")," "),(0,r.kt)("li",{parentName:"ul"},"Create ownership facets ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/996"},(0,r.kt)("inlineCode",{parentName:"a"},"#996"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/julienledem"},"@julienledem"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Adds an ownership facet to both Dataset and Job in the OpenLineage spec to capture ownership of jobs and datasets."))),(0,r.kt)("h3",{id:"changed"},"Changed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Use ",(0,r.kt)("inlineCode",{parentName:"li"},"RUNNING")," EventType in Flink integration for currently running jobs ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/985"},(0,r.kt)("inlineCode",{parentName:"a"},"#985"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/mzareba382"},"@mzareba382"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Makes use of the new ",(0,r.kt)("inlineCode",{parentName:"em"},"RUNNING")," event type in the Flink integration, changing events sent by Flink jobs from ",(0,r.kt)("inlineCode",{parentName:"em"},"OTHER")," to this new type.")),(0,r.kt)("li",{parentName:"ul"},"Convert task objects to JSON-encodable objects when creating custom Airflow version facets ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/1018"},(0,r.kt)("inlineCode",{parentName:"a"},"#1018"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/fm100"},"@fm100"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Implements a ",(0,r.kt)("inlineCode",{parentName:"em"},"to_json_encodable")," function in the Airflow integration to make task objects JSON-encodable."))),(0,r.kt)("h3",{id:"fixed"},"Fixed"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Add support for custom SQL queries in v3 Great Expectations API ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/OpenLineage/OpenLineage/pull/1025"},(0,r.kt)("inlineCode",{parentName:"a"},"#1025"))," ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/collado-mike"},"@collado-mike"),(0,r.kt)("br",{parentName:"li"}),"",(0,r.kt)("em",{parentName:"li"},"Fixes support for custom SQL statements in the Great Expectations provider. (The Great Expectations custom SQL datasource was not applied to the support for the V3 checkpoints API.)"))))}c.isMDXComponent=!0}}]);