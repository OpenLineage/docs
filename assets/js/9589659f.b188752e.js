"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2478],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),m=p(t),d=i,f=m["".concat(c,".").concat(d)]||m[d]||l[d]||o;return t?a.createElement(f,s(s({ref:n},u),{},{components:t})):a.createElement(f,s({ref:n},u))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,s=new Array(o);s[0]=m;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var p=2;p<o;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},51961:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=t(87462),i=(t(67294),t(3905));const o={title:"Custom Facets",sidebar_position:4},s="Custom Facets",r={unversionedId:"spec/facets/custom-facets",id:"spec/facets/custom-facets",title:"Custom Facets",description:"In addition to the existing facets mentioned in this documentation, users can extend the base facets and provide their own facet definition as part of the payload in OpenLineage event. For example, when OpenLineage event is emitted from the Apache Airflow using OpenLineage's Airflow integration, the following facets can be observed:",source:"@site/docs/spec/facets/custom-facets.md",sourceDirName:"spec/facets",slug:"/spec/facets/custom-facets",permalink:"/docs/spec/facets/custom-facets",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/spec/facets/custom-facets.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{title:"Custom Facets",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Output Statistics Facet",permalink:"/docs/spec/facets/dataset-facets/output-dataset-facets/output_statistics"},next:{title:"Producers",permalink:"/docs/spec/producers"}},c={},p=[{value:"Example of creating your first custom facet",id:"example-of-creating-your-first-custom-facet",level:2}],u={toc:p};function l(e){let{components:n,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"custom-facets"},"Custom Facets"),(0,i.kt)("p",null,"In addition to the existing facets mentioned in this documentation, users can extend the base facets and provide their own facet definition as part of the payload in OpenLineage event. For example, when OpenLineage event is emitted from the Apache Airflow using OpenLineage's Airflow integration, the following facets can be observed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "eventTime": "2022-10-03T00:07:56.891667Z",\n  "eventType": "START",\n  "inputs": [],\n  "job": {\n    "facets": {},\n    "name": "inlet_outlet_demo.test-operator",\n    "namespace": "uninhabited-magnify-7821"\n  },\n  "outputs": [],\n  "producer": "https://github.com/OpenLineage/OpenLineage/tree/0.13.0/integration/airflow",\n  "run": {\n    "facets": {\n      "airflow_runArgs": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.13.0/integration/airflow",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/BaseFacet",\n        "externalTrigger": true\n      },\n      "airflow_version": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.13.0/integration/airflow",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/BaseFacet",\n        "airflowVersion": "2.3.4+astro.1",\n        "openlineageAirflowVersion": "0.13.0",\n        "operator": "airflow.operators.python.PythonOperator",\n        "taskInfo": {\n          "_BaseOperator__from_mapped": false,\n          "_BaseOperator__init_kwargs": {\n            "depends_on_past": false,\n            "email": [],\n            "email_on_failure": false,\n            "email_on_retry": false,\n            "op_kwargs": {\n              "x": "Apache Airflow"\n            },\n            "owner": "demo",\n            "python_callable": "<function python_operator at 0x40414aa040>",\n            "start_date": "2022-10-02T00:00:00+00:00",\n            "task_id": "test-operator"\n          },\n          "_BaseOperator__instantiated": true,\n          "_dag": {\n            "dag_id": "inlet_outlet_demo",\n            "tags": []\n          },\n          "_inlets": [],\n          "_log": "<Logger airflow.task.operators (DEBUG)>",\n          "_outlets": [],\n          "depends_on_past": false,\n          "do_xcom_push": true,\n          "downstream_task_ids": "{\'end\'}",\n          "email": [],\n          "email_on_failure": false,\n          "email_on_retry": false,\n          "executor_config": {},\n          "ignore_first_depends_on_past": true,\n          "inlets": [],\n          "op_args": [],\n          "op_kwargs": {\n            "x": "Apache Airflow"\n          },\n          "outlets": [],\n          "owner": "demo",\n          "params": "{}",\n          "pool": "default_pool",\n          "pool_slots": 1,\n          "priority_weight": 1,\n          "python_callable": "<function python_operator at 0x40414aa040>",\n          "queue": "default",\n          "retries": 0,\n          "retry_delay": "0:05:00",\n          "retry_exponential_backoff": false,\n          "show_return_value_in_logs": true,\n          "start_date": "2022-10-02T00:00:00+00:00",\n          "task_group": "<airflow.utils.task_group.TaskGroup object at 0x40416160a0>",\n          "task_id": "test-operator",\n          "trigger_rule": "all_success",\n          "upstream_task_ids": "{\'begin\'}",\n          "wait_for_downstream": false,\n          "weight_rule": "downstream"\n        }\n      },\n      "parentRun": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.13.0/integration/airflow",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/ParentRunFacet",\n        "job": {\n          "name": "inlet_outlet_demo",\n          "namespace": "uninhabited-magnify-7821"\n        },\n        "run": {\n          "runId": "4da6f6d2-8902-3b6c-be7e-9269610a8c8f"\n        }\n      }\n    },\n    "runId": "753b0c7c-e424-4e10-a5ab-062ae5be43ee"\n  }\n}\n')),(0,i.kt)("p",null,"Both ",(0,i.kt)("inlineCode",{parentName:"p"},"airflow_runArgs")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"airflow_version")," are not part of the default OpenLineage facets found ",(0,i.kt)("a",{parentName:"p",href:"https://openlineage.io/apidocs/openapi"},"here"),". However, as long as they follow the ",(0,i.kt)("a",{parentName:"p",href:"https://openlineage.io/spec/1-0-2/OpenLineage.json#/$defs/BaseFacet"},"BaseFacet")," to contain the two mandatory element ",(0,i.kt)("inlineCode",{parentName:"p"},"_producer")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"_schemaURL"),", it will be accepted and stored as part of the OpenLineage event, and will be able to be retrieved when you query those events."),(0,i.kt)("p",null,"Custom facets are not part of the default facets. Therefore, it will be treated as a payload data as-is, but applications retrieving those, if they have the capability to understand its structure and use them, should be able to do so without any problems."),(0,i.kt)("h2",{id:"example-of-creating-your-first-custom-facet"},"Example of creating your first custom facet"),(0,i.kt)("p",null,"Let's look at this sample OpenLineage client code written in python, that defines and uses a custom facet called ",(0,i.kt)("inlineCode",{parentName:"p"},"my-facet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'#!/usr/bin/env python3\nfrom openlineage.client.run import (\n    RunEvent,\n    RunState,\n    Run,\n    Job,\n    Dataset,\n    OutputDataset,\n    InputDataset,\n)\nfrom openlineage.client.client import OpenLineageClient, OpenLineageClientOptions\nfrom openlineage.client.facet import (\n    BaseFacet,\n    SqlJobFacet,\n    SchemaDatasetFacet,\n    SchemaField,\n    SourceCodeLocationJobFacet,\n    NominalTimeRunFacet,\n)\nfrom openlineage.client.uuid import generate_new_uuid\nfrom datetime import datetime, timezone, timedelta\nfrom typing import List\nimport attr\nfrom random import random\n\nimport logging, os\nlogging.basicConfig(level=logging.DEBUG)\n\nPRODUCER = f"https://github.com/openlineage-user"\nnamespace = "python_client"\n\nurl = "http://localhost:5000"\napi_key = "1234567890ckcu028rzu5l"\n\nclient = OpenLineageClient(\n    url=url,\n    # optional api key in case the backend requires it\n    options=OpenLineageClientOptions(api_key=api_key),\n)\n\n# generates job facet\ndef job(job_name, sql, location):\n    facets = {\n        "sql": SqlJobFacet(sql)\n    }\n    if location != None:\n        facets.update(\n            {"sourceCodeLocation": SourceCodeLocationJobFacet("git", location)}\n        )\n    return Job(namespace=namespace, name=job_name, facets=facets)\n\n@attr.s\nclass MyFacet(BaseFacet):\n    name: str = attr.ib()\n    age: str = attr.ib()\n    email: str = attr.ib()\n    _additional_skip_redact: List[str] = [\'name\', \'age\', \'email\']\n    def __init__(self, name, age, email):\n        super().__init__()\n        self.name = name\n        self.age = age\n        self.email = email\n\n# geneartes run racet\ndef run(run_id, hour, name, age, email):\n    return Run(\n        runId=run_id,\n        facets={\n            "nominalTime": NominalTimeRunFacet(\n                nominalStartTime=f"2022-04-14T{twoDigits(hour)}:12:00Z"\n            ),\n            "my_facet": MyFacet(name, age, email)\n        },\n    )\n\n# generates dataset\ndef dataset(name, schema=None, ns=namespace):\n    if schema == None:\n        facets = {}\n    else:\n        facets = {"schema": schema}\n    return Dataset(namespace, name, facets)\n\n\n# generates output dataset\ndef outputDataset(dataset, stats):\n    output_facets = {"stats": stats, "outputStatistics": stats}\n    return OutputDataset(dataset.namespace, dataset.name, dataset.facets, output_facets)\n\n\n# generates input dataset\ndef inputDataset(dataset, dq):\n    input_facets = {\n        "dataQuality": dq,\n    }\n    return InputDataset(dataset.namespace, dataset.name, dataset.facets, input_facets)\n\n\ndef twoDigits(n):\n    if n < 10:\n        result = f"0{n}"\n    elif n < 100:\n        result = f"{n}"\n    else:\n        raise f"error: {n}"\n    return result\n\n\nnow = datetime.now(timezone.utc)\n\n\n# generates run Event\ndef runEvents(job_name, sql, inputs, outputs, hour, min, location, duration):\n    run_id = str(generate_new_uuid())\n    myjob = job(job_name, sql, location)\n    myrun = run(run_id, hour, \'user_1\', 25, \'user_1@email.com\')\n    st = now + timedelta(hours=hour, minutes=min, seconds=20 + round(random() * 10))\n    end = st + timedelta(minutes=duration, seconds=20 + round(random() * 10))\n    started_at = st.isoformat()\n    ended_at = end.isoformat()\n    return (\n        RunEvent(\n            eventType=RunState.START,\n            eventTime=started_at,\n            run=myrun,\n            job=myjob,\n            producer=PRODUCER,\n            inputs=inputs,\n            outputs=outputs,\n        ),\n        RunEvent(\n            eventType=RunState.COMPLETE,\n            eventTime=ended_at,\n            run=myrun,\n            job=myjob,\n            producer=PRODUCER,\n            inputs=inputs,\n            outputs=outputs,\n        ),\n    )\n\n\n# add run event to the events list\ndef addRunEvents(\n    events, job_name, sql, inputs, outputs, hour, minutes, location=None, duration=2\n):\n    (start, complete) = runEvents(\n        job_name, sql, inputs, outputs, hour, minutes, location, duration\n    )\n    events.append(start)\n    events.append(complete)\n\nevents = []\n\n# create dataset data\nfor i in range(0, 5):\n\n    user_counts = dataset("tmp_demo.user_counts")\n    user_history = dataset(\n        "temp_demo.user_history",\n        SchemaDatasetFacet(\n            fields=[\n                SchemaField(name="id", type="BIGINT", description="the user id"),\n                SchemaField(\n                    name="email_domain", type="VARCHAR", description="the user id"\n                ),\n                SchemaField(name="status", type="BIGINT", description="the user id"),\n                SchemaField(\n                    name="created_at",\n                    type="DATETIME",\n                    description="date and time of creation of the user",\n                ),\n                SchemaField(\n                    name="updated_at",\n                    type="DATETIME",\n                    description="the last time this row was updated",\n                ),\n                SchemaField(\n                    name="fetch_time_utc",\n                    type="DATETIME",\n                    description="the time the data was fetched",\n                ),\n                SchemaField(\n                    name="load_filename",\n                    type="VARCHAR",\n                    description="the original file this data was ingested from",\n                ),\n                SchemaField(\n                    name="load_filerow",\n                    type="INT",\n                    description="the row number in the original file",\n                ),\n                SchemaField(\n                    name="load_timestamp",\n                    type="DATETIME",\n                    description="the time the data was ingested",\n                ),\n            ]\n        ),\n        "snowflake://",\n    )\n\n    create_user_counts_sql = """CREATE OR REPLACE TABLE TMP_DEMO.USER_COUNTS AS (\n            SELECT DATE_TRUNC(DAY, created_at) date, COUNT(id) as user_count\n            FROM TMP_DEMO.USER_HISTORY\n            GROUP BY date\n            )"""\n\n    # location of the source code\n    location = "https://github.com/some/airflow/dags/example/user_trends.py"\n\n    # run simulating Airflow DAG with snowflake operator\n    addRunEvents(\n        events,\n        "create_user_counts",\n        create_user_counts_sql,\n        [user_history],\n        [user_counts],\n        i,\n        11,\n        location,\n    )\n\n\nfor event in events:\n    from openlineage.client.serde import Serde\n    # print(Serde.to_json(event))\n    # time.sleep(1)\n    client.emit(event)\n\n')),(0,i.kt)("p",null,"As you can see in the source code, there is a class called ",(0,i.kt)("inlineCode",{parentName:"p"},"MyFacet")," which extends from the ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseFacet")," of OpenLineage, having three attributes of ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"age"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"email"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@attr.s\nclass MyFacet(BaseFacet):\n    name: str = attr.ib()\n    age: str = attr.ib()\n    email: str = attr.ib()\n    _additional_skip_redact: List[str] = ['name', 'age', 'email']\n    def __init__(self, name, age, email):\n        super().__init__()\n        self.name = name\n        self.age = age\n        self.email = email\n")),(0,i.kt)("p",null,"And, when the application is generating a Run data, you can see the instantiation of ",(0,i.kt)("inlineCode",{parentName:"p"},"MyFacet"),", having the name ",(0,i.kt)("inlineCode",{parentName:"p"},"my_facet"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'def run(run_id, hour, name, age, email):\n    return Run(\n        runId=run_id,\n        facets={\n            "nominalTime": NominalTimeRunFacet(\n                nominalStartTime=f"2022-04-14T{twoDigits(hour)}:12:00Z"\n            ),\n            "my_facet": MyFacet(name, age, email)\n        },\n    )\n')),(0,i.kt)("p",null,"When you run this application with python (and please make sure you have installed ",(0,i.kt)("inlineCode",{parentName:"p"},"openlineage-python")," using pip before running it), you will see a series of JSON output that represents the OpenLineage events being submitted. Here is one example."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "eventTime": "2022-12-09T09:17:28.239394+00:00",\n  "eventType": "COMPLETE",\n  "inputs": [\n    {\n      "facets": {\n        "schema": {\n          "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.18.0/client/python",\n          "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/SchemaDatasetFacet",\n          "fields": [\n            {\n              "description": "the user id",\n              "name": "id",\n              "type": "BIGINT"\n            },\n            {\n              "description": "the user id",\n              "name": "email_domain",\n              "type": "VARCHAR"\n            },\n            {\n              "description": "the user id",\n              "name": "status",\n              "type": "BIGINT"\n            },\n            {\n              "description": "date and time of creation of the user",\n              "name": "created_at",\n              "type": "DATETIME"\n            },\n            {\n              "description": "the last time this row was updated",\n              "name": "updated_at",\n              "type": "DATETIME"\n            },\n            {\n              "description": "the time the data was fetched",\n              "name": "fetch_time_utc",\n              "type": "DATETIME"\n            },\n            {\n              "description": "the original file this data was ingested from",\n              "name": "load_filename",\n              "type": "VARCHAR"\n            },\n            {\n              "description": "the row number in the original file",\n              "name": "load_filerow",\n              "type": "INT"\n            },\n            {\n              "description": "the time the data was ingested",\n              "name": "load_timestamp",\n              "type": "DATETIME"\n            }\n          ]\n        }\n      },\n      "name": "temp_demo.user_history",\n      "namespace": "python_client"\n    }\n  ],\n  "job": {\n    "facets": {\n      "sourceCodeLocation": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.18.0/client/python",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/SourceCodeLocationJobFacet",\n        "type": "git",\n        "url": "https://github.com/some/airflow/dags/example/user_trends.py"\n      },\n      "sql": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.18.0/client/python",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/SqlJobFacet",\n        "query": "CREATE OR REPLACE TABLE TMP_DEMO.USER_COUNTS AS (\\n\\t\\t\\tSELECT DATE_TRUNC(DAY, created_at) date, COUNT(id) as user_count\\n\\t\\t\\tFROM TMP_DEMO.USER_HISTORY\\n\\t\\t\\tGROUP BY date\\n\\t\\t\\t)"\n      }\n    },\n    "name": "create_user_counts",\n    "namespace": "python_client"\n  },\n  "outputs": [\n    {\n      "facets": {},\n      "name": "tmp_demo.user_counts",\n      "namespace": "python_client"\n    }\n  ],\n  "producer": "https://github.com/openlineage-user",\n  "run": {\n    "facets": {\n      "my_facet": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.18.0/client/python",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/BaseFacet",\n        "age": 25,\n        "email": "user_1@email.com",\n        "name": "user_1"\n      },\n      "nominalTime": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.18.0/client/python",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/NominalTimeRunFacet",\n        "nominalStartTime": "2022-04-14T04:12:00Z"\n      }\n    },\n    "runId": "7886a902-8fec-422f-9ee4-818489e59f5f"\n  }\n}\n')),(0,i.kt)("p",null,"Notice the facet information ",(0,i.kt)("inlineCode",{parentName:"p"},"my_facet")," that has is now part of the OpenLineage event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'  ...\n  "run": {\n    "facets": {\n      "my_facet": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.18.0/client/python",\n        "_schemaURL": "https://raw.githubusercontent.com/OpenLineage/OpenLineage/main/spec/OpenLineage.json#/definitions/BaseFacet",\n        "age": 25,\n        "email": "user_1@email.com",\n        "name": "user_1"\n      },\n    ...\n')),(0,i.kt)("p",null,"OpenLineage backend should be able to store this information when submitted, and later, when you access the Lineage, you should be able to view the facet information that you submitted, along with your custom facet that you made. Below is the screen shot of one of the OpenLineage backend called ",(0,i.kt)("a",{parentName:"p",href:"https://marquezproject.ai/"},"Marquez"),", that shows th custom facet that the application has submitted."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:t(66673).Z,width:"1350",height:"799"})),(0,i.kt)("p",null,"You might have noticed the schema URL is actually that of ",(0,i.kt)("inlineCode",{parentName:"p"},"BaseFacet"),". By default, if the facet class did not specify its own schema URL, that value would be that of BaseFacet. From the view of OpenLineage specification, this is legal. However, if you have your own JSON spec defined, and has it publically accessible, you can specify it by overriding the ",(0,i.kt)("inlineCode",{parentName:"p"},"_get_schema")," function as such:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"@attr.s\nclass MyFacet(BaseFacet):\n    name: str = attr.ib()\n    age: str = attr.ib()\n    email: str = attr.ib()\n    _additional_skip_redact: List[str] = ['name', 'age', 'email']\n    def __init__(self, name, age, email):\n        super().__init__()\n        self.name = name\n        self.age = age\n        self.email = email\n\n    @staticmethod\n    def _get_schema() -> str:\n        return \"https://somewhere/schemas/myfacet.json#/definitions/MyFacet\"\n")),(0,i.kt)("p",null,"And the ",(0,i.kt)("inlineCode",{parentName:"p"},"_schemaURL")," of the OpenLineage event would now reflect the change as such:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'  "run": {\n    "facets": {\n      "my_facet": {\n        "_producer": "https://github.com/OpenLineage/OpenLineage/tree/0.18.0/client/python",\n        "_schemaURL": "https://somewhere/schemas/myfacet.json#/definitions/MyFacet",\n        "age": 25,\n        "email": "user_1@email.com",\n        "name": "user_1"\n      },\n')))}l.isMDXComponent=!0},66673:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/custom-facets-b83b931a126917aa7fcd1f605c1bf138.png"}}]);