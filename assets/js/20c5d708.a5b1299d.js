"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[7350],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(a),h=r,m=d["".concat(l,".").concat(h)]||d[h]||c[h]||o;return a?n.createElement(m,s(s({ref:t},u),{},{components:a})):n.createElement(m,s({ref:t},u))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},52943:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={sidebar_position:1},s="Object Model",i={unversionedId:"spec/object-model",id:"spec/object-model",title:"Object Model",description:"OpenLineage was designed to enable large-scale observation of datasets as they move through a complex pipeline.",source:"@site/docs/spec/object-model.md",sourceDirName:"spec",slug:"/spec/object-model",permalink:"/docs/spec/object-model",draft:!1,editUrl:"https://github.com/OpenLineage/docs/tree/main/docs/spec/object-model.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"About OpenLineage",permalink:"/docs/"},next:{title:"Naming Conventions",permalink:"/docs/spec/naming"}},l={},p=[{value:"Run State Update",id:"run-state-update",level:2},{value:"Job",id:"job",level:2},{value:"Job Facets",id:"job-facets",level:3},{value:"Run",id:"run",level:2},{value:"Run Facets",id:"run-facets",level:3},{value:"Dataset",id:"dataset",level:2},{value:"Dataset Facets",id:"dataset-facets",level:3}],u={toc:p};function c(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"object-model"},"Object Model"),(0,r.kt)("p",null,"OpenLineage was designed to enable large-scale observation of datasets as they move through a complex pipeline."),(0,r.kt)("p",null,"Because of this, it integrates with various tools with the aim of emitting real-time lineage events as datasets are created and transformed. The object model is flexible, with abstract definitions for Dataset and Job that support a variety of underlying data architectures. OpenLineage cares how Datasets come into being, not just that relationships exist between them. Accordingly, its object model contains both Jobs ",(0,r.kt)("em",{parentName:"p"},"and")," Datasets."),(0,r.kt)("p",null,"Logically, an OpenLineage backend learns about Datasets by receiving information about Jobs that run. Most Jobs have at least one input or output Dataset, and a lineage graph can be created by weaving together observations of many Jobs across multiple platforms."),(0,r.kt)("p",null,"This information is in the form of ",(0,r.kt)("strong",{parentName:"p"},"Run State Updates"),", which contain information about Jobs, Datasets, and Runs."),(0,r.kt)("h2",{id:"run-state-update"},"Run State Update"),(0,r.kt)("p",null,"A Run State Update is prepared and sent when something important occurs within your pipeline, and each one can be thought of as a distinct observation. This commonly happens when a Job starts or finishes."),(0,r.kt)("p",null,"The run state itself refers to a stage within the ",(0,r.kt)("a",{parentName:"p",href:"/docs/spec/run-cycle"},"run cycle")," of the current run. Usually, the first Run State for a Job would be ",(0,r.kt)("inlineCode",{parentName:"p"},"START")," and the last would be ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLETE"),". A run cycle is likely to have at least two Run State Updates, and perhaps more. Each one will also have timestamp of when this particular state change happened."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"OpenLineage Object Model",src:a(47369).Z,width:"587",height:"386"})),(0,r.kt)("p",null,"Each Run State Update can include detail about the Job, the Run, and the input and output Datasets involved in the run. Subsequent updates are additive: input Datasets, for example, can be specified along with ",(0,r.kt)("inlineCode",{parentName:"p"},"START"),", along with ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLETE"),", or both. This accommodates situations where information is only available at certain times."),(0,r.kt)("p",null,"Each of these three core entities can also be extended through the use of facets, some of which are documented in the relevant sections below."),(0,r.kt)("h2",{id:"job"},"Job"),(0,r.kt)("p",null,"A Job is a process that consumes or produces Datasets."),(0,r.kt)("p",null,"This is abstract, and can map to different things in different operational contexts. For example, a job could be a task in a workflow orchestration system. It could also be a model, a query, or a checkpoint. Depending on the system under observation, a Job can represent a small or large amount of work."),(0,r.kt)("p",null,"A Job is the part of the object model that represents a discrete bit of defined work. If, for example, you have cron running a Python script that executes a ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE TABLE x AS SELECT * FROM y")," query every day, the Python script is the Job. "),(0,r.kt)("p",null,"Jobs are identified by a unique name within a ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace"),". They are expected to evolve over time and their changes can be captured through Run State Updates. "),(0,r.kt)("h3",{id:"job-facets"},"Job Facets"),(0,r.kt)("p",null,"Facets that can be used to augment the metadata of a Job include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sourceCodeLocation"),": Captures the source code location and version (e.g., the git SHA) of the job.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sourceCode"),": Captures the language (e.g. python) and complete source code of the job. Using this source code, users can gain useful information about what the job does."))),(0,r.kt)("p",null,"For more details, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"./facets/job-facets"},"Job Facets"),"."),(0,r.kt)("h2",{id:"run"},"Run"),(0,r.kt)("p",null,"A Run is an instance of a Job that represents one of its occurrences in time."),(0,r.kt)("p",null,"Each run will have a uniquely identifiable ",(0,r.kt)("inlineCode",{parentName:"p"},"runId")," that is generated by the client as ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Universally_unique_identifier"},"UUID"),". The client is responsible for maintaining the ",(0,r.kt)("inlineCode",{parentName:"p"},"runId")," between different Run State Updates in the same Run. It is recommended to use ",(0,r.kt)("a",{parentName:"p",href:"https://datatracker.ietf.org/doc/draft-ietf-uuidrev-rfc4122bis/"},"UUIDv7")," format."),(0,r.kt)("p",null,"Runs can be used to observe changes in Jobs between their instances. If, for example, you have cron running a Python script that repeats a query every day, this should resuilt in a separate Run for each day."),(0,r.kt)("h3",{id:"run-facets"},"Run Facets"),(0,r.kt)("p",null,"Facets that can be used to augment the metadata of a Run include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"nominalTime"),": Captures the time this run is scheduled for. This is typically used for scheduled jobs. The job has a nominally scheduled time that will be different from the actual time it ran.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"parent"),": Captures the parent Job and Run, for instances where this Run was spawned from a parent Run. For example in the case of ",(0,r.kt)("a",{parentName:"p",href:"https://airflow.apache.org/"},"Airflow"),", there's a Run that represents the DAG itself that is the parent of the individual Runs that represent the tasks it spawns. Similarly when a SparkOperator starts a Spark job, this creates a separate run that refers to the task run as its parent.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"errorMessage"),": Captures potential error messages - and optionally stack traces - with which the run failed.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"sql"),": Captures the SQL query, if this job runs one."))),(0,r.kt)("p",null,"For more details, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"./facets/run-facets"},"Run Facets"),"."),(0,r.kt)("h2",{id:"dataset"},"Dataset"),(0,r.kt)("p",null,"A Dataset is an abstract representation of data. This can refer to a small amount or large amount of data, as long as it's discrete. For databases, this should be a table. For cloud storage, this is often an object in a bucket. This can represent a directory of a filesystem."),(0,r.kt)("p",null,"It has a unique name within a namespace derived from its physical location (i.e., db.host.database.schema.table). The combined namespace and name for a Dataset should be enough to uniquely identify it within a data ecosystem."),(0,r.kt)("p",null,"Typically, a ",(0,r.kt)("em",{parentName:"p"},"Dataset")," changes when a job writing to it completes. Similarly to the ",(0,r.kt)("em",{parentName:"p"},"Job")," and ",(0,r.kt)("em",{parentName:"p"},"Run")," distinction, metadata that is more static from Run to Run is captured in a DatasetFacet - for example, the schema that does not change every run). What changes every ",(0,r.kt)("em",{parentName:"p"},"Run")," is captured as an ",(0,r.kt)("em",{parentName:"p"},"InputFacet")," or an ",(0,r.kt)("em",{parentName:"p"},"OutputFacet")," - for example, a time partition indicating the subset of the data set that was read or written)."),(0,r.kt)("p",null,"A Dataset is the part of the object model that represents a discrete collection of data. If, for example, you have cron running a Python script that executes a ",(0,r.kt)("inlineCode",{parentName:"p"},"CREATE TABLE x AS SELECT * FROM y")," query every day, the ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," tables are Datasets."),(0,r.kt)("h3",{id:"dataset-facets"},"Dataset Facets"),(0,r.kt)("p",null,"Facets that can be used to augment the metadata of a Dataset include:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"schema"),": Captures the schema of the dataset")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dataSource"),": Captures the database instance containing this Dataset (e.g., database schema, object store bucket)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"lifecycleStateChange"),": Captures the lifecycle states of the Dataset (e.g., alter, create, drop, overwrite, rename, truncate)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"version"),": Captures the dataset version when versioning is defined by the data store (e.g.. Iceberg snapshot ID)"))),(0,r.kt)("p",null,"Input Datasets have the following facets:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dataQualityMetrics"),": Captures dataset-level and column-level data quality metrics (row count, byte size, null count, distinct count, average, min, max, quantiles)")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"dataQualityAssertions"),": Captures the result of running data tests on dataset or its columns"))),(0,r.kt)("p",null,"Output Datasets have the following facets:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"outputStatistics"),": Captures the size of the output written to a dataset (e.g., row count and byte size)")),(0,r.kt)("p",null,"For more details, please refer to the ",(0,r.kt)("a",{parentName:"p",href:"./facets/dataset-facets"},"Dataset Facets"),"."))}c.isMDXComponent=!0},47369:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/object-model-6533a9f8050f1d25bea01c1cb9a59bd1.svg"}}]);