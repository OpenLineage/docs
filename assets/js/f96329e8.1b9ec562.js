"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5798],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},87281:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={title:"The Python Client -- the Foundation of OpenLineage Integrations",date:new Date("2022-07-29T00:00:00.000Z"),authors:["Robinson"],description:"The Python client enables users to create custom integrations."},o=void 0,s={permalink:"/blog/python-client",source:"@site/blog/python-client/index.mdx",title:"The Python Client -- the Foundation of OpenLineage Integrations",description:"The Python client enables users to create custom integrations.",date:"2022-07-29T00:00:00.000Z",formattedDate:"July 29, 2022",tags:[],readingTime:3.38,hasTruncateMarker:!0,authors:[{name:"Michael Robinson",title:"OpenLineage Community Manager",url:"https://github.com/merobi-hub",imageURL:"https://github.com/merobi-hub.png",key:"Robinson"}],frontMatter:{title:"The Python Client -- the Foundation of OpenLineage Integrations",date:"2022-07-29T00:00:00.000Z",authors:["Robinson"],description:"The Python client enables users to create custom integrations."},prevItem:{title:"The Current State of Column-level Lineage",permalink:"/blog/column-lineage"},nextItem:{title:"Microsoft Purview Accelerates Lineage Extraction from Azure Databricks",permalink:"/blog/openlineage-microsoft-purview"}},p={authorsImageUrls:[void 0]},l=[{value:"Introduction",id:"introduction",level:3},{value:"Python Client Data Structures",id:"python-client-data-structures",level:3},{value:"The OpenLineage-dbt Integration",id:"the-openlineage-dbt-integration",level:3},{value:"Additional Resources",id:"additional-resources",level:3}],c={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The Python client enables users to create custom integrations."),(0,r.kt)("h3",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"Thanks to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage"},"OpenLineage")," community\u2019s active work on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/tree/main/integration"},"integrations"),", the pursuit of lineage is getting more efficient and effective all the time. And our growing list of partners and adapters makes OpenLineage plenty powerful out of the box. At the same time, the nature of the data engineering field means that lineage capture is an ongoing process \u2013 simply put, the work of lineage is never done."),(0,r.kt)("p",null,"Hence, as lineage capture becomes integral to your pipelines, situations can arise that require new custom integrations. Enter the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/tree/main/client/python"},"Python client"),", one of two built-in clients included in the project (the other being the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/tree/main/client/java"},"Java client"),"). The OpenLineage spec is defined using JSON schema, but we have created these clients so that new integrations do not have to reinvent the wheel. "),(0,r.kt)("p",null,"OpenLineage\u2019s Python client enables the creation of lineage metadata events with Python code. The core data structures currently offered by the client include the ",(0,r.kt)("inlineCode",{parentName:"p"},"RunEvent"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"RunState"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Run"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Job"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Dataset"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"Transport")," classes. These either configure or collect data for the emission of lineage events."),(0,r.kt)("p",null,"In the history of the project, the client has been useful in helping us avoid unnecessary duplication of code. It is also integral to OpenLineage\u2019s existing integrations, serving as the basis of the Airflow and dbt integrations, for example. It could also act as the foundation of your own custom integration should you need to write one. (Another use case: tests for a new Airflow extractor.)"),(0,r.kt)("p",null,"For this reason, an existing integration can serve as a useful example of how to use the client to write a new integration (and, hopefully, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/blob/main/CONTRIBUTING.md"},"contribute it")," back to the project!). What follows is an overview of the Python client and the dbt integration, which uses the Python client. You\u2019ll see how the client receives metadata from dbt to make it available to a consumer of OpenLineage such as Microsoft Purview, Amundsen, Astronomer, Egeria or Marquez."),(0,r.kt)("h3",{id:"python-client-data-structures"},"Python Client Data Structures"),(0,r.kt)("p",null,"The core structures of the client organize metadata about the foundational objects of the OpenLineage spec: runs, jobs and datasets."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"dataset")," is a class consisting of a ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace")," and, optionally, ",(0,r.kt)("inlineCode",{parentName:"p"},"facets")," array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"@attr.s\nclass Dataset:\n    namespace: str = attr.ib()\n    name: str - attr.ib()\n    Facets: Dict = attr.ib(factory=dict)\n")),(0,r.kt)("p",null,"The same goes for a ",(0,r.kt)("inlineCode",{parentName:"p"},"job"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"@attr.s\nclass Job:\n    namespace: str = attr.ib()\n    name: str - attr.ib()\n    Facets: Dict = attr.ib(factory=dict)\n")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"RunEvent")," sends the time, state, job, run, producer, input and output information needed to construct an OpenLineage job run event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"@attr.s \nclass RunEvent:\n    eventType: RunState = attr.ib(validator=attr.validators.in_(RunState))\n    eventTime: str = attr.ib()\n    run: Run = attr.ib()\n    job: Job = attr.ib()\n    producer: str = attr.ib()\n    inputs: Optional[List[Dataset]] = attr.ib(factory=list)\n    outputs: Optional[List[Dataset]] = attr.ib(factory=list)\n")),(0,r.kt)("h3",{id:"the-openlineage-dbt-integration"},"The OpenLineage-dbt Integration"),(0,r.kt)("p",null,"At a high level, the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/tree/main/integration/dbt"},"dbt integration")," uses the Python client to push metadata to the OpenLineage backend. The metadata it makes available comprises the run lifecycle, including any dataset inputs and outputs accessed during a job run."),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"dbt-ol")," ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/blob/main/integration/dbt/scripts/dbt-ol"},"script"),", the integration uses the project\u2019s ",(0,r.kt)("inlineCode",{parentName:"p"},"ParentRunMetadata")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"DbtArtifactProcessor")," classes, both of which can be found in the OpenLineage common integration, to parse metadata from the dbt ",(0,r.kt)("inlineCode",{parentName:"p"},"manifest")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"run_result")," in order to produce OpenLineage events:  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"from openlineage.common.provider.dbt import DbtArtifactProcessor, ParentRunMetadata\n\n#\u2026\n\nif parent_id:\n    parent_namespace, parent_job_name, parent_run_id = parent_id.split(\u2018/\u2019)\n    parent_run_metadata = ParentRunMetadata(\n        run_id=parent_run_id,\n        job_name=parent_job_name,\n        job_namespace=parent_namespace\n    )\n\nprocessor = DbtArtifactProcessor(\n    producer=PRODUCER,\n    target=target,\n    job_namespace=job_namespace,\n    project_dir=project_dir,\n    profile_name=profile_name,\n    logger=logger\n)\n")),(0,r.kt)("p",null,"The integration uses a wrapper for dbt runs because start and complete events are not emitted until execution concludes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"dbt_run_event = dbt_run_event_start(\n    job_name=f\u201cdbt-run-{processor.project[\u2018name\u2019]}\u201d,\n    job_namespace=job_namespace,\n    parent_run_metadata=parent_run_metadata\n)\n\ndbt_run_metadata = ParentRunMetadata(\n    run_id=dbt_run_event.run.runId,\n    job_name=dbt_run_event.job.name,\n    job_namespace=dbt_run_event.job.namespace\n)\n\nprocessor.dbt_run_metadata = dbt_run_metadata\n")),(0,r.kt)("p",null,"After executing dbt, the script parses the metadata using the processor and emits a run event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'events = processor.parse().events()\n\nclient.emit(dbt_run_event_end(\n    run_id=dbt_run_metadata.run_id,\n    job_namespace=dbt_run_metadata.job_namespace,\n    job_name=dbt_run_metadata.job_name,\n    parent_run_metadata=parent_run_metadata\n    ))\nlogger.info(f"Emitted {len(events) + 2} openlineage events")\n')),(0,r.kt)("h3",{id:"additional-resources"},"Additional Resources"),(0,r.kt)("p",null,"Check out the source code here: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/tree/main/client/python"},"https://github.com/OpenLineage/OpenLineage/tree/main/client/python"),"."),(0,r.kt)("p",null,"Interested in contributing to the project? Read our guide for new contributors: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/OpenLineage/OpenLineage/blob/main/CONTRIBUTING.md"},"https://github.com/OpenLineage/OpenLineage/blob/main/CONTRIBUTING.md"),"."),(0,r.kt)("p",null,"Join us on Slack: ",(0,r.kt)("a",{parentName:"p",href:"http://bit.ly/OpenLineageSlack"},"http://bit.ly/OpenLineageSlack"),"."),(0,r.kt)("p",null,"Attend a community meeting: ",(0,r.kt)("a",{parentName:"p",href:"https://bit.ly/OLwikitsc"},"https://bit.ly/OLwikitsc"),"."))}u.isMDXComponent=!0}}]);